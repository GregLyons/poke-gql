#
# QUERIES
#

extend type Query {
  versionGroupByID(id: ID!): VersionGroup!

  """
  Select a VersionGroup by its snake_case name, e.g. 'Blue/Red'.
  """
  versionGroupByName(name: String!): VersionGroup!
  
  """
  Select VersionGroups, with optional cursor-based pagination.

  'introducedAfter' and 'introducedBefore' refer to the number of a Generation, and are inclusive.
  """
  versionGroups(
    pagination: PaginationInput
    filter: VersionGroupFilter
  ): [VersionGroup!]!
}

#
# NODES AND HELPER TYPES
#

type VersionGroup implements Node {
  id: ID!

  """
  The initials of the games in the VersionGroup, or an abbreviation. Corresponds with the conventions used on Bulbapedia.

  For example:
    'GS' for 'Gold/Silver'
    'C' for 'Crystal'
    'Pt' for 'Platinum'
    'Colo' for 'Colosseum'
    'PE' for 'Let's Go Pikachu and Eevee'
    'SwSh' for 'Sword/Shield'
  """
  code: String!

  descriptions: VersionGroupDescriptionConnection

  """
  The formatted name of the VersionGroup. If there are multiple games in the group, they are separated by a '/'.

  For example:
    'Gold/Silver' for 'GS'
    'SwSh' for 'Sword/Shield'
  """
  formattedName: String!

  """
  The Generation in which the VersionGroup was introduced. 
  """
  introduced: VersionGroupIntroductionConnection

  sprites: VersionGroupSpriteConnection
}

#
# CONNECTIONS AND EDGES
# 

# DESCRIPTION

type VersionGroupDescriptionConnection implements Connection {
  edges(pagination: PaginationInput filter: DescriptionFilter): [VersionGroupDescriptionEdge!]! 
  count: Int!
}

type VersionGroupDescriptionEdge implements Edge {  
  node: Description!
}

# GENERATION

type VersionGroupIntroductionConnection implements Connection {
  edges(pagination: PaginationInput filter: GenerationFilter): [VersionGroupIntroductionEdge!]! 
  count: Int!
}

type VersionGroupGenerationEdge implements Edge {  
  node: Generation!
}

# SPRITE

type VersionGroupSpriteConnection implements Connection {
  edges(pagination: PaginationInput filter: SpriteFilter): [VersionGroupSpriteEdge!]! 
  count: Int!
}

type VersionGroupSpriteEdge implements Edge {  
  node: Sprite!
}

#
# INPUTS
#

input VersionGroupFilter implements Filter {
  introducedAfter: Int
  introducedBefore: Int

  contains: String
  endsWith: String
  startsWith: String
}