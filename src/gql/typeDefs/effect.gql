#
# QUERIES
#

extend type Query {
  effectByID(id: ID!): Effect!

  """
  Select an Effect by its snake_case name, e.g. 'costs_hp'.
  """
  effectByName(name: String!): Effect!
  
  """
  Select Effects, with optional cursor-based pagination.

  'introducedAfter' and 'introducedBefore' refer to the number of a Generation, and are inclusive.

  'startsWith', 'contains', 'endsWith' refer to the name, and are case-insensitive.
  """
  effects(
    generation: Int = 8
    pagination: PaginationInput
    filter: EffectFilter
  ): [Effect!]!
}

#
# NODES AND HELPER FIELDS
#

type Effect implements Node {
  id: ID!
abilities: EffectAbilityConnection

  """
  The name of the Effect in Title Case, with appropriate punctuation.
  """
  formattedName: String!

  """
  The Generation of this Effect.
  """ 
  generation: EffectGenerationConnection

  """
  The Generation in which the Effect was introduced. Note that Moves can gain Effects between Generations.

  For example, 'low_kick' was introduced in Generation 1, but it didn't have the Effect 'depends_on_weight' until Generation 3.
  """
  introduced: EffectIntroductionConnection

  items: EffectItemConnection

  moves: EffectMoveConnection

  """
  The name of the Effect in snake_case. If the Effect has a verb in its name, the verb is conjugated in third person.

  Examples:
    'switches_out_target' instead of 'switch_out_target' ('roar')
    'ignores_ability' instead of 'ignore_ability' ('gastro_acid')
  """
  name: String!
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type EffectAbilityConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: AbilityFilter
  ): [EffectAbilityEdge!]! 

}

type EffectAbilityEdge implements Edge {  
  node: Ability!
}

# GENERATION

type EffectGenerationConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: GenerationFilter
  ): [EffectGenerationEdge!]! 

}

type EffectGenerationEdge implements Edge {  
  node: Generation!
}

type EffectIntroductionConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: GenerationFilter
  ): [EffectIntroductionEdge!]! 

}

type EffectIntroductionEdge implements Edge {  
  node: Generation!
}

# ITEM

type EffectItemConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: ItemFilter
  ): [EffectItemEdge!]! 

}

type EffectItemEdge implements Edge {  
  node: Item!
}

# MOVE

type EffectMoveConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: MoveFilter
  ): [EffectMoveEdge!]! 

}

type EffectMoveEdge implements Edge {  
  node: Move!
}

#
# INPUTS
# 

input EffectFilter {
  """
  The number of the Generation in which the Effect was introduced.
  """
  introduced: Int
  """
  The number of the Generation after which the Effect was introduced.
  """
  introducedAfter: Int
  """
  The number of the Generation before which the Effect was introduced.
  """
  introducedBefore: Int

  """
  The name of the Effect in snake_case.
  """
  name: String
  """
  Entities whose name contains the given string, case-insensitive.
  """
  contains: String
  """
  Entities whose name ends with the given string, case-insensitive.
  """
  endsWith: String
  """
  Entities whose name starts with the given string, case-insensitive.
  """
  startsWith: String
}