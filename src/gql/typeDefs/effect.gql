#
# QUERIES
#

extend type Query {
  """
  Select an Effect by its snake_case name, e.g. 'costs_hp'.
  """
  effectByName(
    generation: Int = 8,
    generations: [Int]
    name: String!
  ): [Effect!]!

  """
  Select Effects by their snake_case name, e.g. 'costs_hp'.
  """
  effectsByName(
    generation: Int = 8,
    generations: [Int]
    names: [String!]!
  ): [Effect!]!
  
  """
  Select Effects with filtering and pagination.
  """
  effects(
    generation: Int = 8
    generations: [Int]
    pagination: PaginationInput
    filter: EffectFilter
  ): [Effect!]!
}

#
# NODES AND HELPER FIELDS
#

"""
A combat effect from various different sources, e.g. Ability or Move. These are unofficial classifications, and attempt to capture effects of Abilities, Moves, etc. which are not already captured by other entities, e.g. 'anti_mini' for bonus damage against minimized targets (like from 'astonish'), 'affects_weight' for 'autotomize'.
"""
type Effect implements Node {
  id: ID!
  
  """
  E.g. 'gooey' has the 'punishes_contact' Effect.
  """
  abilities(filter: AbilityFilter): EffectAbilityConnection

  """
  A description of this Effect.
  """
  description: String!

  """
  E.g. 'psychic_terrain' has the 'protects_against_priority' Effect, and 'magic_room' has the 'manipulates_item' Effect.
  """
  fieldStates(filter: FieldStateFilter): EffectFieldStateConnection

  """
  The name of the Effect in Title Case, with appropriate punctuation.
  """
  formattedName: String!

  """
  The Generation of this Effect.
  """ 
  generation(filter: GenerationFilter): EffectGenerationConnection

  """
  The Generation in which the Effect was introduced. Note that Moves can gain Effects between Generations.

  For example, 'low_kick' was introduced in Generation 1, but it didn't have the Effect 'depends_on_weight' until Generation 3.
  """
  introduced(filter: GenerationFilter): EffectIntroductionConnection

  """
  E.g. The 'mystery_berry' has the 'restores_pp' Effect.
  """
  items(filter: ItemFilter): EffectItemConnection

  """
  E.g. 'astonish' has the 'anti_mini' Effect.
  """
  moves(filter: MoveFilter): EffectMoveConnection

  """
  The name of the Effect in snake_case. If the Effect has a verb in its name, the verb is conjugated in third person.

  Examples:
    'switches_out_target' instead of 'switch_out_target' ('roar')
    'ignores_ability' instead of 'ignore_ability' ('gastro_acid')
  """
  name: String!

  """
  The name of the Effect with only alphanumeric characters.
  """
  unformattedName: String!
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type EffectAbilityConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [EffectAbilityEdge!]! 

}

type EffectAbilityEdge implements Edge {  
  node: Ability!
}

# FIELD STATE

type EffectFieldStateConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [EffectFieldStateEdge!]! 

}

type EffectFieldStateEdge implements Edge {  
  node: FieldState!
}

# GENERATION

type EffectGenerationConnection implements Connection {
  id: String!
  edges(
    pagination: PaginationInput
  ): [EffectGenerationEdge!]! 

}

type EffectGenerationEdge implements Edge {  
  node: Generation!
}

type EffectIntroductionConnection implements Connection {
  id: String!
  edges(
    pagination: PaginationInput
  ): [EffectIntroductionEdge!]! 

}

type EffectIntroductionEdge implements Edge {  
  node: Generation!
}

# ITEM

type EffectItemConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [EffectItemEdge!]! 

}

type EffectItemEdge implements Edge {  
  node: Item!
}

# MOVE

type EffectMoveConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [EffectMoveEdge!]! 

}

type EffectMoveEdge implements Edge {  
  node: Move!
}

#
# INPUTS
# 

input EffectFilter {
  """
  The number of the Generation in which the Effect was introduced.
  """
  introduced: Int

  """
  The number of the Generation after which the Effect was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the Effect was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the Effect in snake_case.
  """
  name: String
  
  names: [String]

  """
  Effects whose unformatted name contains the given string, case-insensitive.
  """
  contains: String

  """
  Effects whose unformatted name ends with the given string, case-insensitive.
  """
  endsWith: String

  """
  Effects whose unformatted name starts with the given string, case-insensitive.
  """
  startsWith: String
}