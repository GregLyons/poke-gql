#
# QUERIES
#

extend type Query {
  effectByID(id: ID!): Effect!

  """
  Select an Effect by its snake_case name, e.g. 'costs_hp'.
  """
  effectByName(id: ID!): Effect!
  
  """
  Select Effects, with optional cursor-based pagination.

  'introducedAfter' and 'introducedBefore' refer to the number of a Generation, and are inclusive.

  'startsWith', 'contains', 'endsWith' refer to the name, and are case- and punctuation- insensitive.
  """
  effects(
    cursor: String,
    limit: Int,
    contains: String,
    endsWith: String,
    introducedAfter: Int,
    introducedBefore: Int,
    startsWith: String,
  ): [Effect!]!
}

#
# NODES AND HELPER FIELDS
#

type Effect implements Node {
  id: ID!

  abilities(input: ConnectionInput): EffectAbilityConnection

  """
  The name of the Effect in Title Case, with appropriate punctuation.
  """
  formattedName: String!

  """
  The Generation in which the Effect was introduced. Note that Moves can gain Effects between Generations.

  For example, 'low_kick' was introduced in Generation 1, but it didn't have the Effect 'depends_on_weight' until Generation 3.
  """
  introduced(input: ConnectionInput): EffectGenerationConnection

  items(input: ConnectionInput): EffectItemConnection

  moves(input: ConnectionInput): EffectMoveConnection

  """
  The name of the Effect in snake_case. If the Effect has a verb in its name, the verb is conjugated in third person.

  Examples:
    'switches_out_target' instead of 'switch_out_target' ('roar')
    'ignores_ability' instead of 'ignore_ability' ('gastro_acid')
  """
  name: String!
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type EffectAbilityConnection implements Connection {
  edges: [EffectAbilityEdge!]! 
  pageInfo: PageInfo!
}

type EffectAbilityEdge implements Edge {
  cursor: String!
  node: Effect!
}

# GENERATION

type EffectGenerationConnection implements Connection {
  edges: [EffectGenerationEdge!]! 
  pageInfo: PageInfo!
}

type EffectGenerationEdge implements Edge {
  cursor: String!
  node: Generation!
}

# ITEM

type EffectItemConnection implements Connection {
  edges: [EffectItemEdge!]! 
  pageInfo: PageInfo!
}

type EffectItemEdge implements Edge {
  cursor: String!
  node: Effect!
}

# MOVE

type EffectMoveConnection implements Connection {
  edges: [EffectMoveEdge!]! 
  pageInfo: PageInfo!
}

type EffectMoveEdge implements Edge {
  cursor: String!
  node: Effect!
}
