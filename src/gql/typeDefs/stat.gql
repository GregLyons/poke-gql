#
# QUERIES
#

extend type Query {
  """
  Select a Stat by its snake_case name, e.g. 'critical_hit_ratio'.
  """
  statByName(
    generation: Int = 8
    generations: [Int]
    name: String!
  ): Stat!
  
  """
  Select Stats with filtering and pagination.
  """
  stats(
    generation: Int = 8
    generations: [Int]
    pagination: PaginationInput
    filter: StatFilter
  ): [Stat!]!
}

#
# NODES AND HELPER TYPES
#

type Stat implements Node {
  id: ID!

  """
  The name of the Stat in Title Case, with appropriate punctuation.
  """
  formattedName: String!

  """
  The Generation of this Stat.
  """ 
  generation(filter: GenerationFilter): StatGenerationConnection

  """
  The Generation in which the Stat was introduced.
  """
  introduced(filter: GenerationFilter): StatIntroductionConnection

  """
  E.g. 'competitive' boosts 'special_attack' by +2.
  """
  modifiedByAbility(filter: AbilityFilter): StatModifiedByAbilityConnection

  """
  E.g. 'tailwind' boosts 'speed' by 2.0.
  """
  modifiedByFieldState(filter: FieldStateFilter): StatModifiedByFieldStateConnection

  """
  E.g. 'choice_scarf' boosts 'speed' by 1.5.
  """
  modifiedByItem(filter: ItemFilter): StatModifiedByItemConnection

  """
  E.g. 'draco_meteor' reduces 'special_attack' by -2.
  """
  modifiedByMove(filter: MoveFilter): StatModifiedByMoveConnection

  """
  E.g. 'adamant' increases 'attack' by 1.1.
  """
  modifiedByNature(filter: NatureFilter): StatModifiedByNatureConnection

  """
  The name of the Stat in snake_case.
  """
  name: String!
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type StatModifiedByAbilityConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [StatModifiedByAbilityEdge!]!

}

type StatModifiedByAbilityEdge implements StatModificationEdge & Edge {  
  node: Ability!

  """
  An integer between -6 and 6 (except for moves which max out a stat, e.g. 'anger_point', in which case is 12). Null if the Ability modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the Ability modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met.
  
  For example, once rain is present for 'swift_swim', the speed boost is guaranteed to occur, so the 'chance' is 100.0.
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: StatModificationRecipient!
}

# FIELD STATE

type StatModifiedByFieldStateConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [StatModifiedByFieldStateEdge!]!

}

type StatModifiedByFieldStateEdge implements StatModificationEdge & Edge {  
  node: FieldState!

  """
  An integer between -6 and 6. Null if the FieldState modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the FieldState modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met.

  E.g. once the Move 'tailwind' has been used successfully, setting up the 'tailwind' FieldState, the user and its allies have their 'speed' doubled with a probability of 100.0.
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: StatModificationRecipient!
}

# GENERATION

type StatGenerationConnection implements Connection {
  edges(
    pagination: PaginationInput
  ): [StatGenerationEdge!]! 

}

type StatGenerationEdge implements Edge {  
  node: Generation!
}

type StatIntroductionConnection implements Connection {
  edges(
    pagination: PaginationInput
  ): [StatIntroductionEdge!]! 

}

type StatIntroductionEdge implements Edge {  
  node: Generation!
}

# ITEM

type StatModifiedByItemConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [StatModifiedByItemEdge!]!

}

type StatModifiedByItemEdge implements StatModificationEdge & Edge {  
  node: Item!

  """
  An integer between -6 and 6. Null if the Item modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the Item modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met.
  
  For example, once a Pokemon has fallen bellow quarter health, stat-boosting berries are guaranteed to give a stat boost, so the 'chance' is 100.0.
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: StatModificationRecipient!
}

# MOVE

type StatModifiedByMoveConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [StatModifiedByMoveEdge!]!

}

type StatModifiedByMoveEdge implements StatModificationEdge & Edge {  
  node: Move!

  """
  An integer between -6 and 6 (except for moves which max out a stat, e.g. 'belly_drum', in which case is 12). Null if the Move modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the Move modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met (i.e. the move being successful/hitting).
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: StatModificationRecipient!
}

# NATURE

type StatModifiedByNatureConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [StatModifiedByNatureEdge!]!

}

type StatModifiedByNatureEdge implements StatModificationEdge & Edge {
  node: Nature!

  """
  As of Gen 8, Natures don't modify stats via stages.
  """
  stage: Int

  """
  The factor by which the Nature scales the Stat.
  """
  multiplier: Float

  """
  Natures always successfully modify their corresponding Stats.
  """
  chance: Float!

  """
  The recipient of the Stat modification by a Nature is always the user (i.e. the Pokemon with the Nature).
  """
  recipient: StatModificationRecipient!
}

#
# INPUTS
#

input StatFilter {
  """
  The number of the Generation in which the Stat was introduced.
  """
  introduced: Int

  """
  The number of the Generation after which the Stat was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the Stat was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the Stat in snake_case.
  """
  name: String

  """
  Entities whose name contains the given string, case-insensitive.
  """
  contains: String

  """
  Entities whose name ends with the given string, case-insensitive.
  """
  endsWith: String

  """
  Entities whose name starts with the given string, case-insensitive.
  """
  startsWith: String
}