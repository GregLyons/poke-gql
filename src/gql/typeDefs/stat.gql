#
# QUERIES
#

extend type Query {
  statByID(id: ID!): Stat!

  """
  Select a Stat by its snake_case name, e.g. 'critical_hit_ratio'.
  """
  statByName(generatoion: Int = 8, name: String!): Stat!
  
  """
  Select Stats, with optional cursor-based pagination.

  'introducedAfter' and 'introducedBefore' refer to the number of a Generation, and are inclusive.

  'startsWith', 'contains', 'endsWith' refer to the name, and are case-insensitive.
  """
  stats(
    generation: Int = 8
    pagination: PaginationInput
    filter: StatFilter
  ): [Stat!]!
}

#
# NODES AND HELPER TYPES
#

type Stat implements Node {
  id: ID!

  """
  The name of the Stat in Title Case, with appropriate punctuation.
  """
  formattedName: String!

  """
  The Generation of this Stat.
  """ 
  generation: StatGenerationConnection

  """
  The Generation in which the Stat was introduced.
  """
  introduced: StatIntroductionConnection

  modifiedByAbility: StatModifiedByAbilityConnection

  modifiedByFieldState: StatModifiedByFieldStateConnection

  modifiedByItem: StatModifiedByItemConnection

  modifiedByMove: StatModifiedByMoveConnection

  """
  The name of the Stat in snake_case.
  """
  name: String!
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type StatModifiedByAbilityConnection implements Connection {
  count(filter: AbilityFilter): Int!
  
  edges(
    pagination: PaginationInput
    filter: AbilityFilter
  ): [StatModifiedByAbilityEdge!]!

}

type StatModifiedByAbilityEdge implements Edge {  
  node: Ability!

  """
  An integer between -6 and 6 (except for moves which max out a stat, e.g. 'anger_point', in which case is 12). Null if the Ability modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the Ability modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met.
  
  For example, once rain is present for 'swift_swim', the speed boost is guaranteed to occur, so the 'chance' is 100.0.
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: Recipient!
}

# FIELD STATE

type StatModifiedByFieldStateConnection implements Connection {
  count(filter: FieldStateFilter): Int!
  
  edges(
    pagination: PaginationInput
    filter: FieldStateFilter
  ): [StatModifiedByFieldStateEdge!]!

}

type StatModifiedByFieldStateEdge implements Edge {  
  node: FieldState!

  """
  An integer between -6 and 6. Null if the FieldState modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the FieldState modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met.

  E.g. once the Move 'tailwind' has been used successfully, setting up the 'tailwind' FieldState, the user and its allies have their 'speed' doubled with a probability of 100.0.
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: Recipient!
}

# GENERATION

type StatGenerationConnection implements Connection {
  count(filter: GenerationFilter): Int!
  
  edges(
    pagination: PaginationInput
    filter: GenerationFilter
  ): [StatGenerationEdge!]! 

}

type StatGenerationEdge implements Edge {  
  node: Generation!
}

type StatIntroductionConnection implements Connection {
  count(filter: GenerationFilter): Int!
  
  edges(
    pagination: PaginationInput
    filter: GenerationFilter
  ): [StatIntroductionEdge!]! 

}

type StatIntroductionEdge implements Edge {  
  node: Generation!
}

# ITEM

type StatModifiedByItemConnection implements Connection {
  count(filter: ItemFilter): Int!
  
  edges(
    pagination: PaginationInput
    filter: ItemFilter
  ): [StatModifiedByItemEdge!]!

}

type StatModifiedByItemEdge implements Edge {  
  node: Item!

  """
  An integer between -6 and 6. Null if the Item modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the Item modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met.
  
  For example, once a Pokemon has fallen bellow quarter health, stat-boosting berries are guaranteed to give a stat boost, so the 'chance' is 100.0.
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: Recipient!
}

# MOVE

type StatModifiedByMoveConnection implements Connection {
  count(filter: MoveFilter): Int!
  
  edges(
    pagination: PaginationInput
    filter: MoveFilter
  ): [StatModifiedByMoveEdge!]!

}

type StatModifiedByMoveEdge implements Edge {  
  node: Move!

  """
  An integer between -6 and 6 (except for moves which max out a stat, e.g. 'belly_drum', in which case is 12). Null if the Move modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the Move modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met (i.e. the move being successful/hitting).
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: Recipient!
}

#
# INPUTS
#

input StatFilter {
  """
  The number of the Generation in which the Stat was introduced.
  """
  introduced: Int

  """
  The number of the Generation after which the Stat was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the Stat was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the Stat in snake_case.
  """
  name: String

  """
  Entities whose name contains the given string, case-insensitive.
  """
  contains: String

  """
  Entities whose name ends with the given string, case-insensitive.
  """
  endsWith: String

  """
  Entities whose name starts with the given string, case-insensitive.
  """
  startsWith: String
}