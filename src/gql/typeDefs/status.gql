#
# QUERIES
#

extend type Query {
  statusByID(id: ID!): Status!

  """
  Select a Status by its snake_case name, e.g. 'center_of_attention'.
  """
  statusByName(name: String!): Status!
  
  """
  Select Statuses, with optional cursor-based pagination.

  'introducedAfter' and 'introducedBefore' refer to the number of a Generation, and are inclusive.

  'startsWith', 'contains', 'endsWith' refer to the name, and are case-insensitive.
  """
  statuses(
    pagination: PaginationInput
    filter: StatusFilter
  ): [Status!]!
}

#
# NODES AND HELPER TYPES
#

type Status implements Node {
  id: ID!

  abilityCauses: StatusCausedByAbilityConnection

  abilityResists: StatusResistedByAbilityConnection

  """
  The name of the Status in Title Case, with appropriate punctuation.
  """
  formattedName: String!

  """
  The Generation of this Status.
  """ 
  generation: StatusGenerationConnection

  """
  The Generation in which the Status was introduced.
  """
  introduced: StatusIntroductionConnection

  itemCauses: StatusCausedByItemConnection

  itemResists: StatusResistedByItemConnection

  moveCauses: StatusCausedByMoveConnection

  """
  Refers to Moves which either cure or alleviate the negative effects of Status conditions. For example, 'heal_bell' cannot prevent the 'burn' status, but it can heal it. We bring it under 'resistsStatus' rather than splitting it off into its own field like 'healsStatus'. 
  """
  moveResists: StatusResistedByMoveConnection

  """
  The name of the Status in snake_case.
  """
  name: String!
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type StatusCausedByAbilityConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: AbilityFilter
  ): [StatusCausedByAbilityEdge!]!

}

type StatusCausedByAbilityEdge implements Edge {  
  node: Ability!
  
  """
  The probability of the Ability causing the Status once the necessary conditions have been met. 

  For example, 'static' causing 'paralysis' has a 'chance' of 30.0 since that is the probability of the user of a Move being paralyzed, assuming the Move makes contact (a necessary condition for 'static').
  """
  chance: Float!
}

type StatusResistedByAbilityConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: AbilityFilter
  ): [StatusResistedByAbilityEdge!]!

}

type StatusResistedByAbilityEdge implements Edge {  
  node: Ability!
}

# GENERATION

type StatusGenerationConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: GenerationFilter
  ): [StatusGenerationEdge!]! 

}

type StatusGenerationEdge implements Edge {  
  node: Generation!
}

type StatusIntroductionConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: GenerationFilter
  ): [StatusIntroductionEdge!]! 

}

type StatusIntroductionEdge implements Edge {  
  node: Generation!
}

# ITEM

type StatusCausedByItemConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: ItemFilter
  ): [StatusCausedByItemEdge!]!

}

type StatusCausedByItemEdge implements Edge {  
  node: Item!
  
  """
  The probability of the Item causing the Status once the necessary conditions have been met.
  """
  chance: Float!
}

type StatusResistedByItemConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: ItemFilter
  ): [StatusResistedByItemEdge!]!

}

type StatusResistedByItemEdge implements Edge {  
  node: Item!
}

# MOVE

type StatusCausedByMoveConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: MoveFilter
  ): [StatusCausedByMoveEdge!]!

}

type StatusCausedByMoveEdge implements Edge {  
  node: Move!
  
  """
  The probability of the Move causing the Status once the necessary conditions have been met (i.e. the move being successful/hitting).
  """
  chance: Float!
}

type StatusResistedByMoveConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: MoveFilter
  ): [StatusResistedByMoveEdge!]!

}

type StatusResistedByMoveEdge implements Edge {  
  node: Move!
}

#
# INPUTS
#

input StatusFilter {
  """
  The number of the Generation in which the Status was introduced.
  """
  introduced: Int

  """
  The number of the Generation after which the Status was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the Status was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the Status in snake_case.
  """
  name: String

  """
  Entities whose name contains the given string, case-insensitive.
  """
  contains: String

  """
  Entities whose name ends with the given string, case-insensitive.
  """
  endsWith: String

  """
  Entities whose name starts with the given string, case-insensitive.
  """
  startsWith: String
}