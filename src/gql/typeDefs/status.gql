#
# QUERIES
#

extend type Query {
  """
  Select a Status by its snake_case name, e.g. 'center_of_attention'.
  """
  statusByName(
    generation: Int = 8
    generations: [Int]
    name: String!
  ): [Status!]!

  """
  Select Statuses by their snake_case name, e.g. 'center_of_attention'.
  """
  statusesByName(
    generation: Int = 8
    generations: [Int]
    names: [String!]!
  ): [Status!]!
  
  """
  Select Statuses with filtering and pagination.
  """
  statuses(
    generation: Int = 8
    filter: StatusFilter
  ): StatusConnection!
}

#
# TOP-LEVEL CONNECTION
#

type StatusConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [StatusEdge!]!
}

type StatusEdge implements Edge {
  node: Status!
}

#
# NODES AND HELPER TYPES
#

type Status implements Node {
  id: ID!

  """
  E.g. 'flame_body' causes 'burn'.
  """
  causedByAbility(filter: AbilityFilter, pagination: AbilityPaginationInput): StatusCausedByAbilityConnection

  """
  E.g. 'toxic_spikes' causes 'poison' or 'bad_poison'.
  """
  causedByFieldState(filter: FieldStateFilter, pagination: FieldStatePaginationInput): StatusCausedByFieldStateConnection

  """
  E.g. 'toxic_orb' causes 'bad_poison'.
  """
  causedByItem(filter: ItemFilter, pagination: ItemPaginationInput): StatusCausedByItemConnection

  """
  E.g. 'yawn' causes 'drowsy'.
  """
  causedByMove(filter: MoveFilter, pagination: MovePaginationInput): StatusCausedByMoveConnection

  """
  A description of this Status.
  """
  description: String!

  """
  The name of the Status in Title Case, with appropriate punctuation.
  """
  formattedName: String!

  """
  The Generation of this Status.
  """ 
  generation(filter: GenerationFilter, pagination: GenerationPaginationInput): StatusGenerationConnection

  """
  The Generation in which the Status was introduced.
  """
  introduced(filter: GenerationFilter, pagination: GenerationPaginationInput): StatusIntroductionConnection
  
  """
  The name of the Status in snake_case.
  """
  name: String!

  """
  E.g. 'immunity' protects against 'poison' and 'bad_poison'. 
  """
  resistedByAbility(filter: AbilityFilter, pagination: AbilityPaginationInput): StatusResistedByAbilityConnection

  """
  E.g. 'electric_terrain' prevents opponents from being inflicted with 'sleep' or 'drowsy' Status. (Note that for the case of 'yawn', 'electric_terrain' still prevents 'drowsy' Pokemon from falling asleep.)

  'preventedByFieldState' may be a more appropriate key name, but 'resistedByFieldState' is consistent with the other key names.
  """
  resistedByFieldState(filter: FieldStateFilter, pagination: FieldStatePaginationInput): StatusResistedByFieldStateConnection

  """
  E.g. 'lum_berry' removes 'poison', 'paralysis', etc. 
  """
  resistedByItem(filter: ItemFilter, pagination: ItemPaginationInput): StatusResistedByItemConnection

  """
  Refers to Moves which either cure or alleviate the negative effects of Status conditions. For example, 'heal_bell' cannot prevent the 'burn' status, but it can heal it. We bring it under 'resistsStatus' rather than splitting it off into its own field like 'healsStatus'. 
  """
  resistedByMove(filter: MoveFilter, pagination: MovePaginationInput): StatusResistedByMoveConnection

  """
  The name of the Status with only alphanumeric characters.
  """
  unformattedName: String!

  """
  Whether the Status is volatile. Non-volatile statuses persist even upon switching out.
  """
  volatile: Boolean!
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type StatusCausedByAbilityConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [StatusCausedByAbilityEdge!]!

}

type StatusCausedByAbilityEdge implements StatusCauseEdge & Edge {  
  node: Ability!
  
  """
  The probability of the Ability causing the Status once the necessary conditions have been met. 

  For example, 'static' causing 'paralysis' has a 'chance' of 30.0 since that is the probability of the user of a Move being paralyzed, assuming the Move makes contact (a necessary condition for 'static').
  """
  chance: Float!
}

type StatusResistedByAbilityConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [StatusResistedByAbilityEdge!]!

}

type StatusResistedByAbilityEdge implements Edge {  
  node: Ability!
}

# FIELD STATE

type StatusCausedByFieldStateConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [StatusCausedByFieldStateEdge!]!

}

type StatusCausedByFieldStateEdge implements StatusCauseEdge & Edge {  
  node: FieldState!
  
  """
  The probability of the FieldState causing the Status once the necessary conditions have been met.
  """
  chance: Float!
}

type StatusResistedByFieldStateConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [StatusResistedByFieldStateEdge!]!

}

type StatusResistedByFieldStateEdge implements Edge {  
  node: FieldState!
}

# GENERATION

type StatusGenerationConnection implements Connection {
  id: String!
  edges: [StatusGenerationEdge!]! 

}

type StatusGenerationEdge implements Edge {  
  node: Generation!
}

type StatusIntroductionConnection implements Connection {
  id: String!
  edges: [StatusIntroductionEdge!]! 

}

type StatusIntroductionEdge implements Edge {  
  node: Generation!
}

# ITEM

type StatusCausedByItemConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [StatusCausedByItemEdge!]!

}

type StatusCausedByItemEdge implements StatusCauseEdge & Edge {  
  node: Item!
  
  """
  The probability of the Item causing the Status once the necessary conditions have been met.
  """
  chance: Float!
}

type StatusResistedByItemConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [StatusResistedByItemEdge!]!

}

type StatusResistedByItemEdge implements Edge {  
  node: Item!
}

# MOVE

type StatusCausedByMoveConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [StatusCausedByMoveEdge!]!

}

type StatusCausedByMoveEdge implements StatusCauseEdge & Edge {  
  node: Move!
  
  """
  The probability of the Move causing the Status once the necessary conditions have been met (i.e. the move being successful/hitting).
  """
  chance: Float!
}

type StatusResistedByMoveConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [StatusResistedByMoveEdge!]!

}

type StatusResistedByMoveEdge implements Edge {  
  node: Move!
}

enum StatusColumnNames {
  GEN
  ID
  NAME
  FORMATTED_NAME
  INTRODUCED
  UNFORMATTED_NAME
  VOLATILE
}

#
# INPUTS
#

input StatusPaginationInput {
  limit: Int = 20
  offset: Int = 0
  orderBy: StatusColumnNames = UNFORMATTED_NAME
  sortBy: SortByEnum = ASC
  search: String = ""
}

input StatusFilter {
  """
  The number of the Generation in which the Status was introduced.
  """
  introduced: Int

  """
  The number of the Generation after which the Status was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the Status was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the Status in snake_case.
  """
  name: String
  
  names: [String]

  """
  Entities whose unformatted name contains the given string, case-insensitive.
  """
  contains: String

  """
  Entities whose unformatted name ends with the given string, case-insensitive.
  """
  endsWith: String

  """
  Entities whose unformatted name starts with the given string, case-insensitive.
  """
  startsWith: String
}