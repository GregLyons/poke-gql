#
# QUERIES
#

extend type Query {
  """
  Select a FieldState by its snake_case name, e.g. 'electric_terrain'.
  """
  fieldStateByName(
    generation: Int = 8
    generations: [Int]
    name: String!
  ): [FieldState!]!

  """
  Select FieldStates by their snake_case name, e.g. 'electric_terrain'.
  """
  fieldStatesByName(
    generation: Int = 8
    generations: [Int]
    names: [String!]!
  ): [FieldState!]!
  
  """
  Select FieldStates with filtering and pagination.
  """
  fieldStates(
    generation: Int = 8
    generations: [Int]
    pagination: FieldStatePaginationInput
    filter: FieldStateFilter
  ): [FieldState!]!
}

#
# NODES AND HELPER TYPES
#

type FieldState implements Node {
  id: ID!

  """
  E.g. 'rain' enables 'swift_swim'.
  """
  activatesAbility(filter: AbilityFilter): FieldStateActivatesAbilityConnection

  """
  E.g. 'grassy_terrain' enables 'grassy_seed'.
  """
  activatesItem(filter: ItemFilter): FieldStateActivatesItemConnection

  """
  E.g. 'rain' boosts the power of 'water' Moves.
  """
  boostsType(filter: TypeFilter): FieldStateBoostsTypeConnection

  """
  E.g. 'toxic_spikes' causes 'poison'.
  """
  causesStatus(filter: StatusFilter): FieldStateCausesStatusConnection
  
  """
  E.g. 'weather' or 'entry_hazard'.
  """
  class: FieldStateClass!

  """
  E.g. The Move 'stealth_rock' creates the FieldState 'stealth_rock'.
  """
  createdByAbility(filter: AbilityFilter): FieldStateCreatedByAbilityConnection

  """
  E.g. "sunny_day" creates "harsh_sunlight".
  """
  createdByMove(filter: MoveFilter): FieldStateCreatedByMoveConnection

  """
  E.g. 'vine_lash' deals 16.67% damage (per turn), whereas 'sticky_web' deals none. Entry hazards deal their damage on-entry, whereas most if not all other FieldStates deal their damage at the end of each turn.
  """
  damagePercent: Float!

  """
  A custom description of this FieldState.
  """
  description: String!

  """
  E.g. 'mist' has the Effect 'prevents_stat_drop'.
  """
  effects(filter: EffectFilter): FieldStateEffectConnection
  
  """
  E.g. 'rain' enhances 'thunder' by making it bypass accuracy checks. 'grassy_terrain' enhances 'grassy_glide' by giving it increased priority.
  """
  enhancesMove(filter: MoveFilter): FieldStateEnhancesMoveConnection

  """
  E.g. 'damp_rock' extends 'rain'.
  """
  extendedByItem(filter: ItemFilter): FieldStateExtendedByItemConnection

  """
  The name of the FieldState in Title Case.
  """
  formattedName: String!

  """
  The Generation of this FieldState.
  """ 
  generation(filter: GenerationFilter): FieldStateGenerationConnection

  """
  FieldStates which only affect grounded Pokemon, e.g. 'spikes'.
  """
  grounded: Boolean!

  """
  E.g. 'grassy_terrain' hinders 'earthquake' by halving its power. 'harsh_sunlight' hinders 'thunder' by reducing its accuracy.
  """
  hindersMove(filter: MoveFilter): FieldStateHindersMoveConnection

  """
  E.g. 'infiltrator' ignores 'light_screen'.
  """
  ignoredByAbility(filter: AbilityFilter): FieldStateIgnoredByAbilityConnection

  """
  E.g. 'heavy_duty_boots' ignores 'spikes'.
  """
  ignoredByItem(filter: ItemFilter): FieldStateIgnoredByItemConnection

  """
  E.g. 'flying' ignores 'spikes'.
  """
  ignoredByType(filter: TypeFilter): FieldStateIgnoredByTypeConnection

  """
  The Generation in which the FieldState was introduced.
  """ 
  introduced(filter: GenerationFilter): FieldStateIntroductionConnection

  """
  E.g. 'spikes' can have up to 3 layers; most FieldStates can only have 1 layer.
  """
  maxLayers: Int!

  """
  E.g. 'swamp' modifies 'speed'.
  """ 
  modifiesStat(filter: StatFilter): FieldStateModifiesStatConnection

  """
  The name of the FieldState in snake_case. 

  Examples:
    rain
    electric_terrain
  """
  name: String!

  """
  E.g. 'cloud_nine' prevents 'rain' from being set up.
  """
  preventedByAbility(filter: AbilityFilter): FieldStatePreventedByAbilityConnection

  """
  E.g. 'drizzle' removes 'harsh_sunlight' by overwriting it.
  """
  removedByAbility(filter: AbilityFilter): FieldStateRemovedByAbilityConnection

  """
  E.g. The Move 'trick_room' removes the FieldState 'trick_room' (it also creates it).
  """
  removedByMove(filter: MoveFilter): FieldStateRemovedByMoveConnection

  """
  E.g. 'poison' ignores 'toxic_spikes'.
  """
  removedByType(filter: TypeFilter): FieldStateRemovedByTypeConnection

  """
  Items which reduce the damage dealt by a FieldState, e.g. 'safety_goggles' negates damage from 'hail'.
  """
  resistedByItem(filter: ItemFilter): FieldStateResistedByItemConnection

  """
  Types which reduce the damage dealt by a FieldState, e.g. 'ice' resists the damage dealt by 'hail'.
  """
  resistedByType(filter: ItemFilter): FieldStateResistedByTypeConnection

  """
  E.g. 'safeguard' prevents 'burn' from being applied, and 'electric_terrain' prevents' sleep.

  We use 'resistsStatus' as a catch-all for healing, preventing, or negating Statuses, to provide symmetry with other fields, (e.g. 'resistsStatus' on 'Ability').
  """
  resistsStatus(filter: StatusFilter): FieldStateResistsStatusConnection

  """
  E.g. 'cloud_nine' suppresses 'sandstorm', but does not remove it.
  """
  suppressedByAbility(filter: AbilityFilter): FieldStateSuppressedByAbilityConnection

  """
  Who the FieldState targets/affects.
  """
  target: FieldStateTargetClass!  
  
  """
  The name of the FieldState with only alphanumeric characters.
  """
  unformattedName: String!

  """
  E.g. 'rain' weakens the power of 'fire' Moves.
  """
  weakensType(filter: TypeFilter): FieldStateWeakensTypeConnection

  """
  Describes the Type and power of the Move 'weather_ball' when the FieldState is present.
  """
  weatherBall(filter: TypeFilter): FieldStateWeatherBallConnection
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type FieldStateActivatesAbilityConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: AbilityPaginationInput
  ): [FieldStateActivatesAbilityEdge!]!

}

type FieldStateActivatesAbilityEdge implements Edge {  
  node: Ability!
}

type FieldStateCreatedByAbilityConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: AbilityPaginationInput
  ): [FieldStateCreatedByAbilityEdge!]!

}

type FieldStateCreatedByAbilityEdge implements Edge {  
  node: Ability!

  """
  The number of turns that the FieldState is present when created by the Ability. '0' implies the FieldState either lasts indefinitely until overwritten, or is present as long as the source is present (e.g. Primal Kyogre's Primordial Sea).
  """
  turns: Int!
}

type FieldStateIgnoredByAbilityConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: AbilityPaginationInput
  ): [FieldStateIgnoredByAbilityEdge!]!

}

type FieldStateIgnoredByAbilityEdge implements Edge {  
  node: Ability!
}

type FieldStatePreventedByAbilityConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: AbilityPaginationInput
  ): [FieldStatePreventedByAbilityEdge!]!

}

type FieldStatePreventedByAbilityEdge implements Edge {  
  node: Ability!
}

type FieldStateRemovedByAbilityConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: AbilityPaginationInput
  ): [FieldStateRemovedByAbilityEdge!]!

}

type FieldStateRemovedByAbilityEdge implements Edge {  
  node: Ability!
}

type FieldStateSuppressedByAbilityConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: AbilityPaginationInput
  ): [FieldStateSuppressedByAbilityEdge!]!

}

type FieldStateSuppressedByAbilityEdge implements Edge {  
  node: Ability!
}

# EFFECT

type FieldStateEffectConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: EffectPaginationInput
  ): [FieldStateEffectEdge!]! 

}

type FieldStateEffectEdge implements Edge {  
  node: Effect!
}

# GENERATION

type FieldStateGenerationConnection implements Connection {
  id: String!
  edges(
    pagination: PaginationInput
  ): [FieldStateGenerationEdge!]! 

}

type FieldStateGenerationEdge implements Edge {  
  node: Generation!
}

type FieldStateIntroductionConnection implements Connection {
  id: String!
  edges(
    pagination: PaginationInput
  ): [FieldStateIntroductionEdge!]! 

}

type FieldStateIntroductionEdge implements Edge {  
  node: Generation!
}

# ITEM

type FieldStateActivatesItemConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: ItemPaginationInput
  ): [FieldStateActivatesItemEdge!]!

}

type FieldStateActivatesItemEdge implements Edge {  
  node: Item!
}

type FieldStateExtendedByItemConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: ItemPaginationInput
  ): [FieldStateExtendedByItemEdge!]!

}

type FieldStateExtendedByItemEdge implements Edge {  
  node: Item!

  """
  The number of turns that the FieldState is present when the user holds the extending item. E.g. weathers last 8 turns rather than 5 turns when the user holds the corresponding rock (e.g. 'rain' and 'damp_rock').
  """
  turns: Int!
}

type FieldStateIgnoredByItemConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: ItemPaginationInput
  ): [FieldStateIgnoredByItemEdge!]!

}

type FieldStateIgnoredByItemEdge implements Edge {  
  node: Item!
}

type FieldStateResistedByItemConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: ItemPaginationInput
  ): [FieldStateResistedByItemEdge!]!

}

type FieldStateResistedByItemEdge implements Edge {  
  node: Item!

  multiplier: Float!
}

# MOVE

type FieldStateEnhancesMoveConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: MovePaginationInput
  ): [FieldStateEnhancesMoveEdge!]!

}

type FieldStateEnhancesMoveEdge implements Edge {  
  node: Move!
}

type FieldStateHindersMoveConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: MovePaginationInput
  ): [FieldStateHindersMoveEdge!]!

}

type FieldStateHindersMoveEdge implements Edge {  
  node: Move!
}

type FieldStateCreatedByMoveConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: MovePaginationInput
  ): [FieldStateCreatedByMoveEdge!]!

}

type FieldStateCreatedByMoveEdge implements Edge {  
  node: Move!

  """
  The number of turns that the FieldState is present when created by the Move, e.g. 'g_max_vine_lash' creates 'vine_lash' lasting 4 turns.
  """
  turns: Int!
}

type FieldStateRemovedByMoveConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: MovePaginationInput
  ): [FieldStateRemovedByMoveEdge!]!

}

type FieldStateRemovedByMoveEdge implements Edge {  
  node: Move!
}

# STAT

type FieldStateModifiesStatConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: StatPaginationInput
  ): [FieldStateModifiesStatEdge!]!

}

type FieldStateModifiesStatEdge implements StatModificationEdge & Edge {  
  node: Stat!

  """
  An integer between -6 and 6 (except for moves which max out a stat, e.g. 'belly_drum', in which case is 12). Null if the Move modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the Move modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met (i.e. the move being successful/hitting).
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: StatModificationRecipient!
}

# STATUS

type FieldStateCausesStatusConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: StatusPaginationInput
  ): [FieldStateCausesStatusEdge!]!

}

type FieldStateCausesStatusEdge implements StatusCauseEdge & Edge {  
  node: Status!

  """
  The probability of the Move causing the Status once the necessary conditions have been met (i.e. the move being successful/hitting).
  """
  chance: Float!
}

type FieldStateResistsStatusConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: StatusPaginationInput
  ): [FieldStateResistsStatusEdge!]!

}

type FieldStateResistsStatusEdge implements Edge {  
  node: Status!
}

# TYPE

type FieldStateBoostsTypeConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: TypePaginationInput
  ): [FieldStateBoostsTypeEdge!]!

}

type FieldStateBoostsTypeEdge implements MultiplierEdge & Edge {  
  node: Type!

  """
  The multiplier by which the FieldState boosts the power of Moves which have the Type. 
  """
  multiplier: Float!
}

type FieldStateIgnoredByTypeConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: TypePaginationInput
  ): [FieldStateIgnoredByTypeEdge!]!

}

type FieldStateIgnoredByTypeEdge implements Edge {  
  node: Type!
}

type FieldStateRemovedByTypeConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: TypePaginationInput
  ): [FieldStateRemovedByTypeEdge!]!

}

type FieldStateRemovedByTypeEdge implements Edge {  
  node: Type!
}

type FieldStateResistedByTypeConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: TypePaginationInput
  ): [FieldStateResistedByTypeEdge!]!

}

type FieldStateResistedByTypeEdge implements Edge {  
  node: Type!

  multiplier: Float!
}

type FieldStateWeakensTypeConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: TypePaginationInput
  ): [FieldStateWeakensTypeEdge!]!

}

type FieldStateWeakensTypeEdge implements Edge {  
  node: Type!

  """
  The multiplier by which the FieldState weakens the power of Moves which have the Type. 
  """
  multiplier: Float!
}

type FieldStateWeatherBallConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [FieldStateWeatherBallEdge!]!

}

type FieldStateWeatherBallEdge implements Edge {  
  node: Type!
}


#
# ENUMS
#

"""
The damage category of a Move. 'VARIES' means that the Move can be one of the other three categories, e.g. hidden_power before Generation 4.
"""
enum FieldStateClass {
  ENTRY_HAZARD
  OTHER
  PLEDGE
  ROOM
  SCREEN
  TERRAIN
  WEATHER
}

"""
Describes who the Move can target. 'ADJACENT' refers to triple battles, in reference to the user of the Move; in double battles, all Pokemon are considered adjacent.
"""
enum FieldStateTargetClass {
  ALL
  ALL_ALLIES
  ALL_FOES
}

enum FieldStateColumnNames {
  GEN
  ID
  NAME
  FORMATTED_NAME
  INTRODUCED
  UNFORMATTED_NAME
  DAMAGE_PERCENT
  MAX_LAYERS
  ONLY_GROUNDED
  CLASS
  TARGET
}

#
# INPUTS
#

input FieldStatePaginationInput {
  limit: Int = 20
  offset: Int = 0
  orderBy: FieldStateColumnNames = UNFORMATTED_NAME
  sortBy: SortByEnum = ASC
  search: String = ""
}

input FieldStateFilter {
  """
  The number of the Generation in which the FieldState was introduced.
  """
  introduced: Int

  """
  The number of the Generation after which the FieldState was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the FieldState was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the FieldState in snake_case.
  """
  name: String
  
  names: [String]

  """
  FieldStates whose unformatted name contains the given string, case-insensitive.
  """
  contains: String

  """
  FieldStates whose unformatted name ends with the given string, case-insensitive.
  """
  endsWith: String
  
  """
  FieldStates whose unformatted name starts with the given string, case-insensitive.
  """
  startsWith: String

  
  # OTHER FILTERS
  
  class: FieldStateClass

  damagePercent: Float

  """
  E.g. 'spikes' can have up to 3 layers, but 'grassy_terrain' can have only 1 layer.
  """
  maxLayers: Int

  grounded: Boolean

  """
  FieldStates of the given target class, e.g. 'ALL', 'ALL_ALLIES', 'ALL_FOES'.
  """
  target: FieldStateTargetClass
}