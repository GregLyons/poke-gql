#
# QUERIES
#

extend type Query {
  """
  Select Sprites with filtering and pagination.
  """
  sprites(
    filter: SpriteFilter
    pagination: SpritePaginationInput
  ): SpriteConnection!
}

#
# TOP-LEVEL CONNECTION
#

type SpriteConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [SpriteEdge!]!
}

type SpriteEdge implements Edge {
  node: Sprite!
}

#
# NODES AND HELPER TYPES
#

type Sprite implements Node {
  id: ID!

  """
  True if the Sprite is of a back-facing Pokemon. False otherwise (always false for Items).
  """
  back: Boolean!

  """
  The entity represented by the Sprite (e.g. Item or Pokemon).
  """
  entity: SpriteEntityConnection

  """
  The type of entity that the Sprite is depicting, e.g. 'ITEM'.
  """
  entityClass: SpriteClass!

  """
  True if the Sprite is specifically of a female Pokemon. False otherwise (always false for items).

  To clarify, a Sprite of 'nidoran_f' or of 'nidoqueen' is not considered a 'female' Sprite, even though the Pokemon being depicted is clearly female. This designation only applies to Pokemon who have separate Sprites for male and female versions of that Pokemon, e.g. female Raticates have shorter whiskers than male Raticates from Gen 4 onwards.
  """
  female: Boolean!

  """
  A string representing the filepath to the Sprite in the 'sprites' folder from https://github.com/PokeAPI/sprites. 
  
  For example, '/sprites/pokemon/versions/generation-i/1.png' would refer to a front-facing, Generation 1 sprite of Bulbasaur, as a .png. 
  """
  filepath: String!

  """
  The Item represented by the Sprite.
  """
  item(filter: ItemFilter, pagination: ItemPaginationInput): SpriteItemConnection

  """
  The Pokemon represented by the Sprite.
  """
  pokemon(filter: PokemonFilter, pagination: PokemonPaginationInput): SpritePokemonConnection

  """
  True if the Sprite is of a shiny Pokemon. False otherwise (always false for items).
  """
  shiny: Boolean!

  """
  True if the Sprite has a transparent background. False otherwise. 

  Only applies to Sprites Generation 2 and earlier.
  """
  transparent: Boolean!

  """
  The VersionGroup(s) in which this Sprite is present.
  """
  versionGroups(filter: VersionGroupFilter, pagination: VersionGroupPaginationInput): SpriteVersionGroupConnection
}

#
# CONNECTIONS AND EDGES
#

# ITEM

type SpriteItemConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [SpriteItemEdge!]! 

}

type SpriteItemEdge implements Edge {  
  node: Item!
}

# POKEMON

type SpritePokemonConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [SpritePokemonEdge!]! 

}

type SpritePokemonEdge implements Edge {  
  node: Pokemon!
}

# VERSION GROUP

type SpriteVersionGroupConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [SpriteVersionGroupEdge!]! 

}

type SpriteVersionGroupEdge implements Edge {  
  node: VersionGroup!
}

#
# ENUMS
#

"""
The type of entity that the Sprite is depicting.
"""
enum SpriteClass {
  ITEM
  POKEMON
}

#
# UNIONS
#

union SpriteEntityConnection = SpriteItemConnection | SpritePokemonConnection

enum SpriteColumnNames {
  GEN
  PATH
  ENTITY_NAME
}

#
# INPUTS
# 

input SpritePaginationInput {
  limit: Int = 20
  offset: Int = 0
  orderBy: SpriteColumnNames = ENTITY_NAME
  sortBy: SortByEnum = ASC
  search: String = ""
}

input SpriteFilter {
  """
  The number of the Generation in which the Sprite was introduced.
  """
  introduced: Int

  """
  The number of the Generation after which the Sprite was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the Sprite was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the Sprite in snake_case.
  """
  name: String
  
  names: [String]

  """
  Entities whose name contains the given string, case-insensitive.
  """
  contains: String

  """
  Entities whose name ends with the given string, case-insensitive.
  """
  endsWith: String

  """
  Entities whose name starts with the given string, case-insensitive.
  """
  startsWith: String
}