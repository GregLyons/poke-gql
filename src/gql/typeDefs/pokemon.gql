#
# QUERIES
#

extend type Query {
  """
  Select an Pokemon by its snake_case name, e.g. 'pikachu', 'raichu_alola'.
  """
  pokemonByName(
    generation: Int = 8
    generations: [Int]
    name: String!
  ): [Pokemon!]!

  """
  Select multiple Pokemon by their snake_case name, e.g. 'pikachu', 'raichu_alola'.
  """
  pokemonByNames(
    generation: Int = 8
    generations: [Int]
    names: [String!]!
  ): [Pokemon!]!
  
  """
  Select an Pokemon by its psID (only alphabetic characters), e.g. 'pikachu', 'raichualola'.
  """
  pokemonByPSID(
    generation: Int = 8
    generations: [Int]
    psID: String!
  ): [Pokemon!]!

  """
  Select multiple Pokemon by their psIDs (only alphabetic characters), e.g. 'pikachu', 'raichualola'.
  """
  pokemonByPSIDs(
    generation: Int = 8
    generations: [Int]
    psIDs: [String!]!
  ): [Pokemon!]!

  """
  Select Pokemon with filtering and pagination.
  """
  pokemon(
    generation: Int = 8
    filter: PokemonFilter
    pagination: PokemonPaginationInput
  ): PokemonConnection!
}

#
# TOP-LEVEL CONNECTION
#

type PokemonConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [PokemonEdge!]!
}

type PokemonEdge implements Edge {
  node: Pokemon!
}

#
# NODES AND HELPER TYPES
#

type Pokemon implements Node {
  id: ID!

  """
  The Abilities that the Pokemon can possess.
  """
  abilities(filter: AbilityFilter, pagination: AbilityPaginationInput): PokemonAbilityConnection

  """
  The base stats of the Pokemon.
  """
  baseStats: BaseStats!

  """
  The National Dex number of the Pokemon. 
  """
  dexNumber: Int!

  """
  E.g. 'venusaur' enables the use of 'venusaurite', and 'latias' enables the use of 'soul_dew'.
  """
  enablesItem(filter: ItemFilter, pagination: ItemPaginationInput): PokemonEnablesItemConnection

  """
  E.g. 'charizard_gmax' enables 'g_max_wildfire'. 
  
  We wouldn't say, however, that 'smeargle' enables 'sketch', even though it is the only Pokemon that can learn that Move.
  """
  enablesMove(filter: MoveFilter, pagination: MovePaginationInput): PokemonEnablesMoveConnection

  """
  Pokemon for which this Pokemon is a prevolution. 
  """
  evolvesTo(filter: PokemonFilter, pagination: PokemonPaginationInput): PokemonEvolutionConnection

  """
  Pokemon for which this Pokemon is an evolution.
  """
  evolvesFrom(filter: PokemonFilter, pagination: PokemonPaginationInput): PokemonPrevolutionConnection

  """
  Number between 0 and 1 representing proportion of females for this Pokemon.
  """
  femaleRate: Float!

  """
  The name of the Pokemon in Title Case, and with appropriate punctuation. The species name is capitalized, and form data is in parentheses.

  Examples:
    Venusaur (Mega)
    Charizard (Mega X)
    Charizard (G-Max)
    Raticate (Alola)
    Mr. Mime (Galar)
  """
  formattedName: String!

  """
  The type of form of this Pokemon, e.g. 'MEGA' for 'mega_charizard_x', 'BASE' for 'charizard', 'GMAX' for 'charizard_gmax', 'ALOLA' for 'raticate_alola'. 
  """
  formClass: FormClass!

  """
  If the Pokemon is a base form, this is the alternate forms the Pokemon can take.

  If instead the Pokemon is an alternate form, this is the base form of that Pokemon.

  For example:
    'charizard' has forms 'charizard_mega_x', 'charizard_mega_y', and 'charizard_gmax'.
    'charizard_gmax' has the form 'charizard'.
    'raticate' has the form 'raticate_alola'.
    'raticate_alola' has the form 'raticate'.

  """
  forms(filter: PokemonFilter, pagination: PokemonPaginationInput): PokemonFormConnection

  """
  True if Pokemon's gender is 'unknown', i.e. neither male nor female. False otherwise.
  """
  genderless: Boolean!

  """
  The Generation of this Pokemon.
  """ 
  generation(filter: GenerationFilter, pagination: GenerationPaginationInput): PokemonGenerationConnection

  """
  The height of the Pokemon in meters. 0.0 if unknown.
  """
  height: Float!

  """
  The Generation in which the Pokemon was introduced.
  """
  introduced(filter: GenerationFilter, pagination: GenerationPaginationInput): PokemonIntroductionConnection

  """
  Number between 0 and 1 representing proportion of males for this Pokemon.
  """
  maleRate: Float!

  """
  The Moves that the Pokemon can learn.
  """
  moves(filter: MoveFilter, pagination: MovePaginationInput): PokemonMoveConnection!

  """
  The name of the Pokemon in snake_case. Periods are removed, whereas hyphens become underscores. The species name comes first, followed by the form name. 

  Examples:
    venusaur_mega
    charizard_mega_x
    charizard_gmax
    raticate_alola
    mr_mime_galar
  """
  name: String!

  """
  ID of the Pokemon in PokeAPI. 'pikachu_world_cap', 'pikachu_partner', and 'eevee_partner' have values equal to that of their base forms.
  """
  pokeapiID: Int!

  """
  Name of the Pokemon in PokeAPI. 'pikachu_world_cap', 'pikachu_partner', and 'eevee_partner' have values equal to that of their base forms.
  """
  pokeapiName: String!

  """
  ID of the Pokemon in Pokemon Showdown's code for use with, e.g. the package 'pkmn/img' for sprites/icons.
  """
  psID: String!

  removedFromSwSh: Boolean!

  removedFromBDSP: Boolean!

  """
  E.g. Mega-evolutions require their corresponding Mega Stone.
  """
  requiresItem(filter: ItemFilter, pagination: ItemPaginationInput): PokemonRequiresItemConnection

  """
  The name of the Pokemon species in snake_case. Two Pokemon belong to the same species if and only if they have the same National Dex number.

  Examples:
    Venusaur (Mega), venusaur_mega -> venusaur 
    Raticate (Alola), raticate_alola -> raticate
    Mr. Mime (Galar), mr_mime_galar -> mr_mime
  """
  speciesName: String!

  """
  The names of the Pokemon's type, in the form [<type 1>, <type 2>]. Will be length 1 if Pokemon is monotype. E.g. '[GRASS, POISON]' for 'bulbasaur', [WATER] for 'squirtle'.
  """
  typeNames: [TypeName!]!

  """
  The elemental typing of the Pokemon, as an array of Types of length 1 or 2. For example, 'charizard' would have Types ['fire', 'flying'], and 'blastoise' would have Types ['water'].
  """
  typing(filter: TypeFilter, pagination: TypePaginationInput): PokemonTypeConnection!

  """
  The weight of the Pokemon in kilograms. 0.0 if unknown.
  """
  weight: Float!
}

"""
An object containing the six base stats of a Pokemon. For Generation 1, we split the Special stat into Special Attack and Special Defense.
"""
type BaseStats {
  """
  For caching
  """
  id: String!

  hp: Int!
  attack: Int!
  defense: Int!
  specialAttack: Int!
  specialDefense: Int!
  speed: Int!
  baseStatTotal: Int!
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type PokemonAbilityConnection implements Connection {
  id: String!
  count: Int!

  edges: [PokemonAbilityEdge!]!
}

  type PokemonAbilityEdge implements Edge {  
  node: Ability!

  """
  The slot which the Ability occupies on the Pokemon. 
  """
  slot: AbilitySlot
}

# GENERATION

type PokemonGenerationConnection implements Connection {
  id: String!
  edges: [PokemonGenerationEdge!]! 

}

type PokemonGenerationEdge implements Edge {  
  node: Generation!
}

type PokemonIntroductionConnection implements Connection {
  id: String!
  edges: [PokemonIntroductionEdge!]! 

}

type PokemonIntroductionEdge implements Edge {  
  node: Generation!
}

# ITEM

type PokemonEnablesItemConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [PokemonEnablesItemEdge!]! 

}

type PokemonEnablesItemEdge implements Edge {  
  node: Item!
}

type PokemonRequiresItemConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [PokemonRequiresItemEdge!]! 

}

type PokemonRequiresItemEdge implements Edge {  
  node: Item!
}

# MOVE

type PokemonEnablesMoveConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [PokemonEnablesMoveEdge!]! 

}

type PokemonEnablesMoveEdge implements Edge {  
  node: Move!
}

type PokemonMoveConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [PokemonMoveEdge!]!

}

type PokemonMoveEdge implements Edge {  
  node: Move!

  """
  A string representing how the Pokemon can learn the Move, taken mostly from the system used by Pokemon Showdown.

  M: TM/HM
  T: Tutor
  L: Start or level-up, second character onwards is the level
  R: Restricted (special moves like Rotom moves)
  E: Egg
  EV: Evolution from a Pokemon who knows the Move; only present if the Pokemon in question cannot learn the move any other way (otherwise the size of the learnset data roughly doubles).
  D: Dream World
  S: Event, second character onwards is the index in eventData.
  V: Virtual Console or Let's Go transfer
  C: NOT A REAL SOURCE
  """
  learnMethod: String!
}

# POKEMON

type PokemonEvolutionConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [PokemonEvolutionEdge!]!

}

type PokemonEvolutionEdge implements Edge {  

  """
  The evolved form in the evolution relationship.
  """ 
  node: Pokemon!

  """
  The method of evolution.
  """
  method: String!
}

type PokemonPrevolutionConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [PokemonPrevolutionEdge!]!

}

type PokemonPrevolutionEdge implements Edge {  

  """
  The pre-evolved form in the evolution relationship.
  """ 
  node: Pokemon!

  """
  The method of evolution.
  """
  method: String!
}

type PokemonFormConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [PokemonFormEdge!]!

}

type PokemonFormEdge implements Edge {  

  """
  If the starting node is a base form, then this is the alternate form (e.g. the Mega form, Alola form, etc.). 
  
  If instead the starting node is the alternate form, this is the base form. 
  """
  node: Pokemon!

  """
  E.g. MEGA, ALOLA, etc. 

  BASE if the starting node is an alternate form, in which case the ending node is the base form.
  """
  class: FormClass!
}

# TYPE

type PokemonTypeConnection implements Connection {
  id: String!
  count: Int!
  
  edges: [PokemonTypeEdge!]!

}

type PokemonTypeEdge implements Edge {  
  node: Type!
}

#
# ENUMS
# 

enum AbilitySlot {
  ONE
  TWO
  HIDDEN
}

enum FormClass {
  ALOLA
  BASE
  BATTLE
  COSMETIC
  GALAR
  GMAX
  HISUI
  MEGA
  OTHER
  TYPE
}

enum PokemonColumnNames {
  GEN
  ID
  NAME
  FORMATTED_NAME
  SPECIES_NAME
  DEX
  HEIGHT
  WEIGHT
  INTRODUCED
  HP
  ATTACK
  DEFENSE
  SPECIAL_ATTACK
  SPECIAL_DEFENSE 
  SPEED
  BASE_STAT_TOTAL
  FORM_CLASS
  POKEMON_SHOWDOWN_ID
  POKEAPI_NAME
  POKEAPI_ID
  TYPE_NAME_1
  TYPE_NAME_2
  REMOVED_FROM_SWSH
  REMOVED_FROM_BDSP
}

#
# UNIONS
#

union PokemonEnablesConnection = PokemonEnablesItemConnection | PokemonEnablesMoveConnection

#
# INPUTS
#

input PokemonPaginationInput {
  limit: Int = 20
  offset: Int = 0
  orderBy: PokemonColumnNames = POKEMON_SHOWDOWN_ID
  sortBy: SortByEnum = ASC
  search: String = ""
}

input PokemonFilter {
  """
  The number of the Generation in which the Pokemon was introduced.
  """
  introduced: Int
  
  """
  The number of the Generation after which the Pokemon was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the Pokemon was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the Pokemon in snake_case.
  """
  name: String
  
  names: [String]

  """
  Pokemon whose PSID contains the given string, case-insensitive.
  """
  contains: String

  """
  Pokemon whose PSID ends with the given string, case-insensitive.
  """

  endsWith: String

  """
  Pokemon whose PSID starts with the given string, case-insensitive.
  """
  startsWith: String


  # NUMERIC FILTERS


  """
  Pokemon whose weight (kg) is less than the given number, inclusive.
  """
  maxWeight: Float

  """
  Pokemon whose weight (kg) is greater than the given number, inclusive.
  """
  minWeight: Float

  """
  Pokemon whose height (m) is less than the given number, inclusive.
  """
  maxHeight: Float

  """
  Pokemon whose height (m) is greater than the given number, inclusive.
  """
  minHeight: Float

  """
  Pokemon whose National Dex number is less than the given number, inclusive.
  """
  maxDex: Int

  """
  Pokemon whose National Dex number is greater than the given number, inclusive.
  """
  minDex: Int

  """
  Pokemon whose maleRate is less than the given number, inclusive.
  """
  maxMaleRate: Float

  """
  Pokemon whose maleRate is greater than the given number, inclusive.
  """
  minMaleRate: Float

  """
  Pokemon whose femaleRate is less than the given number, inclusive.
  """
  maxFemaleRate: Float

  """
  Pokemon whose femaleRate is greater than the given number, inclusive.
  """
  minFemaleRate: Float


  # BASE STAT FILTERS


  """
  Pokemon whose HP stat is less than the given number, inclusive.
  """
  maxHP: Int

  """
  Pokemon whose HP stat is greater than the given number, inclusive.
  """
  minHP: Int

  """
  Pokemon whose Attack stat is less than the given number, inclusive.
  """
  maxAttack: Int

  """
  Pokemon whose Attack stat is greater than the given number, inclusive.
  """
  minAttack: Int

  """
  Pokemon whose Defense stat is less than the given number, inclusive.
  """
  maxDefense: Int

  """
  Pokemon whose Defense stat is greater than the given number, inclusive.
  """
  minDefense: Int

  """
  Pokemon whose Special Attack stat is less than the given number, inclusive.
  """
  maxSpecialAttack: Int

  """
  Pokemon whose Special Attack stat is greater than the given number, inclusive.
  """
  minSpecialAttack: Int

  """
  Pokemon whose Special Defense stat is less than the given number, inclusive.
  """
  maxSpecialDefense: Int

  """
  Pokemon whose Special Defense stat is greater than the given number, inclusive.
  """
  minSpecialDefense: Int

  """
  Pokemon whose Speed stat is less than the given number, inclusive.
  """
  maxSpeed: Int

  """
  Pokemon whose Speed stat is greater than the given number, inclusive.
  """
  minSpeed: Int

  """
  Pokemon whose BaseStatTotal is less than the given number, inclusive.
  """
  maxBaseStatTotal: Int

  """
  Pokemon whose BaseStatTotal is greater than the given number, inclusive.
  """
  minBaseStatTotal: Int

  
  # OTHER FILTERS


  """
  Pokemon which of the base form of their form group, e.g. Meowth but not Galarian Meowth, Charizard but not Mega Charizard X/Y, nor Gigantamax Charizard.
  """
  formClass: [FormClass]

  """
  Pokemon such that at least one of their Types belongs to the provided array.
  """
  types: [TypeName!]

  """
  False if the Pokemon is present in SwSh.
  """
  removedFromSwSh: Boolean

  """
  False if the Pokemon is present in BDSP.
  """
  removedFromBDSP: Boolean

  """
  True if the Pokemon has unknown gender.
  """
  genderless: Boolean
}