#
# QUERIES
#

extend type Query {
  """
  Select an Pokemon by its snake_case name, e.g. 'pikachu', 'raichu_alola'.
  """
  pokemonByName(
    generation: Int = 8
    generations: [Int]
    name: String!
  ): [Pokemon!]!

  """
  Select Pokemon by their snake_case name, e.g. 'pikachu', 'raichu_alola'.
  """
  pokemonByNames(
    generation: Int = 8
    generations: [Int]
    names: [String!]!
  ): [Pokemon!]!
  
  """
  Select Pokemon with filtering and pagination.
  """
  pokemon(
    generation: Int = 8
    generations: [Int]
    pagination: PaginationInput
    filter: PokemonFilter
  ): [Pokemon!]!
}

#
# NODES AND HELPER TYPES
#

type Pokemon implements Node {
  id: ID!

  """
  The Abilities that the Pokemon can possess.
  """
  abilities(filter: AbilityFilter): PokemonAbilityConnection

  """
  The base stats of the Pokemon.
  """
  baseStats: BaseStats!

  """
  The National Dex number of the Pokemon. 
  """
  dexNumber: Int!

  """
  E.g. 'venusaur' enables the use of 'venusaurite', and 'latias' enables the use of 'soul_dew'.
  """
  enablesItem(filter: ItemFilter): PokemonEnablesItemConnection

  """
  E.g. 'charizard_gmax' enables 'g_max_wildfire'. 
  
  We wouldn't say, however, that 'smeargle' enables 'sketch', even though it is the only Pokemon that can learn that Move.
  """
  enablesMove(filter: MoveFilter): PokemonEnablesMoveConnection

  """
  Pokemon for which this Pokemon is a prevolution. 
  """
  evolvesTo(filter: PokemonFilter): PokemonEvolutionConnection

  """
  Pokemon for which this Pokemon is an evolution.
  """
  evolvesFrom(filter: PokemonFilter): PokemonPrevolutionConnection

  """
  The name of the Pokemon in Title Case, and with appropriate punctuation. The species name is capitalized, and form data is in parentheses.

  Examples:
    Venusaur (Mega)
    Charizard (Mega X)
    Charizard (G-Max)
    Raticate (Alola)
    Mr. Mime (Galar)
  """
  formattedName: String!

  """
  The type of form of this Pokemon, e.g. 'MEGA' for 'mega_charizard_x', 'BASE' for 'charizard', 'GMAX' for 'charizard_gmax', 'ALOLA' for 'raticate_alola'. 
  """
  formClass: FormClass!

  """
  If the Pokemon is a base form, this is the alternate forms the Pokemon can take.

  If instead the Pokemon is an alternate form, this is the base form of that Pokemon.

  For example:
    'charizard' has forms 'charizard_mega_x', 'charizard_mega_y', and 'charizard_gmax'.
    'charizard_gmax' has the form 'charizard'.
    'raticate' has the form 'raticate_alola'.
    'raticate_alola' has the form 'raticate'.

  """
  forms(filter: PokemonFilter): PokemonFormConnection

  """
  The Generation of this Pokemon.
  """ 
  generation(filter: GenerationFilter): PokemonGenerationConnection

  """
  The height of the Pokemon in meters. 0.0 if unknown.
  """
  height: Float!

  """
  The Generation in which the Pokemon was introduced.
  """
  introduced(filter: GenerationFilter): PokemonIntroductionConnection

  """
  The Moves that the Pokemon can learn.
  """
  moves(filter: MoveFilter): PokemonMoveConnection!

  """
  The name of the Pokemon in snake_case. Periods are removed, whereas hyphens become underscores. The species name comes first, followed by the form name. 

  Examples:
    venusaur_mega
    charizard_mega_x
    charizard_gmax
    raticate_alola
    mr_mime_galar
  """
  name: String!

  """
  ID of the Pokemon in Pokemon Showdown's code for use with, e.g. the package 'pkmn/img' for sprites/icons.
  """
  pokemonShowdownID: String!

  """
  E.g. Mega-evolutions require their corresponding Mega Stone.
  """
  requiresItem(filter: ItemFilter): PokemonRequiresItemConnection

  """
  The name of the Pokemon species in snake_case. Two Pokemon belong to the same species if and only if they have the same National Dex number.

  Examples:
    Venusaur (Mega), venusaur_mega -> venusaur 
    Raticate (Alola), raticate_alola -> raticate
    Mr. Mime (Galar), mr_mime_galar -> mr_mime
  """
  speciesName: String!

  """
  The elemental typing of the Pokemon, as an array of Types of length 1 or 2. For example, 'charizard' would have Types ['fire', 'flying'], and 'blastoise' would have Types ['water'].
  """
  typing(filter: TypeFilter): PokemonTypeConnection!

  """
  The weight of the Pokemon in kilograms. 0.0 if unknown.
  """
  weight: Float!
}

"""
An object containing the six base stats of a Pokemon. For Generation 1, we split the Special stat into Special Attack and Special Defense.
"""
type BaseStats {
  hp: Int!
  attack: Int!
  defense: Int!
  specialAttack: Int!
  specialDefense: Int!
  speed: Int!
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type PokemonAbilityConnection implements Connection {
  id: String!
  count: Int!

  edges(
    pagination: PaginationInput
  ): [PokemonAbilityEdge!]!
}

type PokemonAbilityEdge implements Edge {  
  node: Ability!

  """
  The slot which the Ability occupies on the Pokemon. 
  """
  slot: AbilitySlot
}

# GENERATION

type PokemonGenerationConnection implements Connection {
  id: String!
  edges(
    pagination: PaginationInput
  ): [PokemonGenerationEdge!]! 

}

type PokemonGenerationEdge implements Edge {  
  node: Generation!
}

type PokemonIntroductionConnection implements Connection {
  id: String!
  edges(
    pagination: PaginationInput
  ): [PokemonIntroductionEdge!]! 

}

type PokemonIntroductionEdge implements Edge {  
  node: Generation!
}

# ITEM

type PokemonEnablesItemConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [PokemonEnablesItemEdge!]! 

}

type PokemonEnablesItemEdge implements Edge {  
  node: Item!
}

type PokemonRequiresItemConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [PokemonRequiresItemEdge!]! 

}

type PokemonRequiresItemEdge implements Edge {  
  node: Item!
}

# MOVE

type PokemonEnablesMoveConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [PokemonEnablesMoveEdge!]! 

}

type PokemonEnablesMoveEdge implements Edge {  
  node: Move!
}

type PokemonMoveConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [PokemonMoveEdge!]!

}

type PokemonMoveEdge implements Edge {  
  node: Move!

  """
  A string representing how the Pokemon can learn the Move, taken mostly from the system used by Pokemon Showdown.

  M: TM/HM
  T: Tutor
  L: Start or level-up, second character onwards is the level
  R: Restricted (special moves like Rotom moves)
  E: Egg
  D: Dream World
  S: Event, second character onwards is the index in eventData.
  V: Virtual Console or Let's Go transfer
  C: NOT A REAL SOURCE
  """
  learnMethod: String!
}

# POKEMON

type PokemonEvolutionConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [PokemonEvolutionEdge!]!

}

type PokemonEvolutionEdge implements Edge {  

  """
  The evolved form in the evolution relationship.
  """ 
  node: Pokemon!

  """
  The method of evolution.
  """
  method: String!
}

type PokemonPrevolutionConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [PokemonPrevolutionEdge!]!

}

type PokemonPrevolutionEdge implements Edge {  

  """
  The pre-evolved form in the evolution relationship.
  """ 
  node: Pokemon!

  """
  The method of evolution.
  """
  method: String!
}

type PokemonFormConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [PokemonFormEdge!]!

}

type PokemonFormEdge implements Edge {  

  """
  If the starting node is a base form, then this is the alternate form (e.g. the Mega form, Alola form, etc.). 
  
  If instead the starting node is the alternate form, this is the base form. 
  """
  node: Pokemon!

  """
  E.g. MEGA, ALOLA, etc. 

  BASE if the starting node is an alternate form, in which case the ending node is the base form.
  """
  class: FormClass!
}

# TYPE

type PokemonTypeConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [PokemonTypeEdge!]!

}

type PokemonTypeEdge implements Edge {  
  node: Type!
}

#
# ENUMS
# 

enum AbilitySlot {
  ONE
  TWO
  HIDDEN
}

enum FormClass {
  ALOLA
  BASE
  COSMETIC
  GALAR
  GMAX
  HISUI
  MEGA
  OTHER
}

#
# UNIONS
#

union PokemonEnablesConnection = PokemonEnablesItemConnection | PokemonEnablesMoveConnection

#
# INPUTS
#

input PokemonFilter {
  """
  The number of the Generation in which the Pokemon was introduced.
  """
  introduced: Int
  
  """
  The number of the Generation after which the Pokemon was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the Pokemon was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the Pokemon in snake_case.
  """
  name: String
  
  names: [String]

  """
  Pokemon whose name contains the given string, case-insensitive.
  """
  contains: String

  """
  Pokemon whose name ends with the given string, case-insensitive.
  """

  endsWith: String

  """
  Pokemon whose name starts with the given string, case-insensitive.
  """
  startsWith: String


  # STATS FILTERS


  """
  Pokemon whose weight (kg) is less than the given number, inclusive.
  """
  maxWeight: Float

  """
  Pokemon whose weight (kg) is greater than the given number, inclusive.
  """
  minWeight: Float

  """
  Pokemon whose height (m) is less than the given number, inclusive.
  """
  maxHeight: Float

  """
  Pokemon whose height (m) is greater than the given number, inclusive.
  """
  minHeight: Float

  """
  Pokemon whose National Dex number is less than the given number, inclusive.
  """
  maxDex: Int

  """
  Pokemon whose National Dex number is greater than the given number, inclusive.
  """
  minDex: Int


  # BASE STAT FILTERS


  """
  Pokemon whose HP stat is less than the given number, inclusive.
  """
  maxHP: Int

  """
  Pokemon whose HP stat is greater than the given number, inclusive.
  """
  minHP: Int

  """
  Pokemon whose Attack stat is less than the given number, inclusive.
  """
  maxAttack: Int

  """
  Pokemon whose Attack stat is greater than the given number, inclusive.
  """
  minAttack: Int

  """
  Pokemon whose Defense stat is less than the given number, inclusive.
  """
  maxDefense: Int

  """
  Pokemon whose Defense stat is greater than the given number, inclusive.
  """
  minDefense: Int

  """
  Pokemon whose Special Attack stat is less than the given number, inclusive.
  """
  maxSpecialAttack: Int

  """
  Pokemon whose Special Attack stat is greater than the given number, inclusive.
  """
  minSpecialAttack: Int

  """
  Pokemon whose Special Defense stat is less than the given number, inclusive.
  """
  maxSpecialDefense: Int

  """
  Pokemon whose Special Defense stat is greater than the given number, inclusive.
  """
  minSpecialDefense: Int

  """
  Pokemon whose Speed stat is less than the given number, inclusive.
  """
  maxSpeed: Int

  """
  Pokemon whose Speed stat is greater than the given number, inclusive.
  """
  minSpeed: Int

  
  # OTHER FILTERS


  """
  Pokemon which of the base form of their form group, e.g. Meowth but not Galarian Meowth, Charizard but not Mega Charizard X/Y, nor Gigantamax Charizard.
  """
  formClass: FormClass
}