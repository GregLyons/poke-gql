#
# QUERIES
#

extend type Query {
  itemByID(id: ID!): Item!

  """
  Select a Item by its snake_case name, e.g. 'venusaurite'.
  """
  itemByName(number: Int!): Item!
  
  """
  Select Items, with optional cursor-based pagination.

  'introducedAfter' and 'introducedBefore' refer to the number of a Generation, and are inclusive.

  'startsWith', 'contains', 'endsWith' refer to the name, and are case- and punctuation- insensitive.

  'itemClass' is a case-insensitive string, with words separated by underscores, e.g. 'mega_stone', 'z_crystal'. See the ItemClass enum for all possibilities.

  """
  items(
    cursor: String,
    limit: Int,
    contains: String,
    endsWith: String,
    introducedAfter: Int,
    introducedBefore: Int,
    itemClass: String,
    startsWith: String,
  ): [Item!]!
}

#
# NODES AND HELPER TYPES
#

type Item implements Node {
  id: ID!

  boostsType(input: ConnectionInput): ItemBoostsTypeConnection

  boostsUsageMethod(input: ConnectionInput): ItemBoostsUsageMethodConnection

  causesStatus(input: ConnectionInput): ItemCausesStatusConnection

  class: ItemClass

  """
  The Descriptions for the Move across the different VersionGroups.
  """
  descriptions(input: ConnectionInput): ItemDescriptionConnection

  effect(input: ConnectionInput): ItemEffectConnection

  """
  Entities which the Item enables.
  """
  enables(input: ConnectionInput): ItemEnablesConnection

  """
  E.g. Z-Crystals enable their corresponding Z-Moves.
  """
  enablesMove(input: ConnectionInput): ItemEnablesMoveConnection

  """
  E.g. Mega Stones enable their corresponding mega-evolved Pokemon.
  """
  enablesPokemon(input: ConnectionInput): ItemEnablesPokemonConnection

  """
  The formatted name of the Item, with correct punctuation.
  """
  formattedName: String!

  """
  The Generation in which the Item was introduced.
  """
  introduced(input: ConnectionInput): ItemGenerationConnection

  modifiesStat(input: ConnectionInput): ItemModifiesStatConnection

  """
  The name of the Item in snake_case. Hyphens are converted to underscores.
  """
  name: String!

  """
  Describes the Type and power of the Move Natural Gift when the user holds the Item.
  """
  naturalGift(input: ConnectionInput): ItemNaturalGiftConnection

  """
  Entities which the Item requires.
  """
  requires(input: ConnectionInput): ItemRequiresPokemonConnection

  """
  The Pokemon necessary for this item to take effect.

  For example:
    Only Venusaur can use Venasaurite to Mega-evolve.
    Only Latias and Latios can obtain the effects of Soul Dew.
  """
  requiresPokemon(input: ConnectionInput): ItemRequiresPokemonConnection

  resistsType(input: ConnectionInput): ItemResistsTypeConnection

  resistsUsageMethod(input: ConnectionInput): ItemResistsUsageMethodConnection

  resistsStatus(input: ConnectionInput): ItemResistsStatusConnection
}

#
# CONNECTIONS AND EDGES
#

# DESCRIPTION 

type ItemDescriptionConnection implements Connection {
  edges: [ItemDescriptionEdge!]!
  pageInfo: PageInfo!
}

type ItemDescriptionEdge implements Edge {
  cursor: String!
  node: Description!
}

# EFFECT

type ItemEffectConnection implements Connection {
  edges: [ItemEffectEdge!]! 
  pageInfo: PageInfo!
}

type ItemEffectEdge implements Edge {
  cursor: String!
  node: Effect!
}

# GENERATION

type ItemGenerationConnection implements Connection {
  edges: [ItemGenerationEdge!]! 
  pageInfo: PageInfo!
}

type ItemGenerationEdge implements Edge {
  cursor: String!
  node: Generation!
}

# MOVE

type ItemEnablesMoveConnection implements Connection {
  edges: [ItemEnablesMoveEdge!]!
  pageInfo: PageInfo!
}

type ItemEnablesMoveEdge implements Edge {
  cursor: String!
  node: Move!
}

# POKEMON

type ItemEnablesPokemonConnection implements Connection {
  edges: [ItemEnablesPokemonEdge!]!
  pageInfo: PageInfo!
}

type ItemEnablesPokemonEdge implements Edge {
  cursor: String!
  node: Pokemon!
}

type ItemRequiresPokemonConnection implements Connection {
  edges: [ItemRequiresPokemonEdge!]!
  pageInfo: PageInfo!
}

type ItemRequiresPokemonEdge implements Edge {
  cursor: String!
  node: Pokemon!
}

# STAT

type ItemModifiesStatConnection implements Connection {
  edges: [ItemModifiesStatEdge!]!
  pageInfo: PageInfo!
}

type ItemModifiesStatEdge implements Edge {
  cursor: String!
  node: Stat!

  """
  An integer between -6 and 6. Null if the Item modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the Item modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met.
  
  For example, once a Pokemon has fallen bellow quarter health, stat-boosting berries are guaranteed to give a stat boost, so the 'chance' is 100.0.
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: Recipient!
}

# STATUS

type ItemCausesStatusConnection implements Connection {
  edges: [ItemCausesStatusEdge!]!
  pageInfo: PageInfo!
}

type ItemCausesStatusEdge implements Edge {
  cursor: String!
  node: Status!

  """
  The probability of the Item causing the Status once the necessary conditions have been met.
  """
  chance: Float!
}

type ItemResistsStatusConnection implements Connection {
  edges: [ItemResistsStatusEdge!]!
  pageInfo: PageInfo!
}

type ItemResistsStatusEdge implements Edge {
  cursor: String!
  node: Status!
}

# TYPE

type ItemBoostsTypeConnection implements Connection {
  edges: [ItemBoostsTypeEdge!]!
  pageInfo: PageInfo!
}

type ItemBoostsTypeEdge implements Edge {
  cursor: String!
  node: Type!

  """
  The multiplier by which the Item boosts the power of Moves which have the Type. 
  """
  multiplier: Float!
}

type ItemResistsTypeConnection implements Connection {
  edges: [ItemResistsTypeEdge!]!
  pageInfo: PageInfo!
}

type ItemResistsTypeEdge implements Edge {
  cursor: String!
  node: Type!

  """
  The multiplier by which the Item resists the power of Moves which have the Type. 
  """
  multiplier: Float!
}

type ItemNaturalGiftConnection implements Connection {
  edges: [ItemNaturalGiftEdge!]!
  pageInfo: PageInfo!
}

type ItemNaturalGiftEdge implements Edge {
  cursor: String!
  node: Type!

  """
  The power of Natural Gift when used by a Pokemon holding Item.
  """
  power: Int!
}

# USAGE METHOD

type ItemBoostsUsageMethodConnection implements Connection {
  edges: [ItemBoostsUsageMethodEdge!]!
  pageInfo: PageInfo!
}

type ItemBoostsUsageMethodEdge implements Edge {
  cursor: String!
  node: UsageMethod!

  """
  The multiplier by which the Item boosts the power of Moves which have the UsageMethod. 
  """
  multiplier: Float!
}

type ItemResistsUsageMethodConnection implements Connection {
  edges: [ItemResistsUsageMethodEdge!]!
  pageInfo: PageInfo!
}

type ItemResistsUsageMethodEdge implements Edge {
  cursor: String!
  node: UsageMethod!

  """
  The multiplier by which the Item resists the power of Moves which have the UsageMethod. 
  """
  multiplier: Float!
}

#
# ENUMS
#

enum ItemClass {
  MEGA_STONE
  Z_CRYSTAL
  TYPE_ENHANCER
  STAT_ENHANCER
  OTHER
}

#
# UNIONS
#

union ItemEnablesConnection = ItemEnablesMoveConnection | ItemEnablesPokemonConnection