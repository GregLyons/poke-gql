#
# QUERIES
#

extend type Query {
  """
  Select a Item by its snake_case name, e.g. 'venusaurite', 'firium_z'.
  """
  itemByName(
    generation: Int = 8
    generations: [Int]
    name: String!
  ): [Item!]!

  """
  Select Items by their snake_case name, e.g. 'venusaurite', 'firium_z'.
  """
  itemsByName(
    generation: Int = 8
    generations: [Int]
    names: [String!]!
  ): [Item!]!
  
  """
  Select an Item by its psID, e.g. 'intimidate', 'rkssystem'.
  """
  itemByPSID(
    generation: Int = 8
    generations: [Int]
    psID: String!
  ): [Item!]! 
  
  """
  Select Items by their psID, e.g. 'intimidate', 'rkssystem'.
  """
  itemsByPSID(
    generation: Int = 8
    generations: [Int]
    psIDs: [String!]!
  ): [Item!]! 

  """
  Select Items with filtering and pagination.
  """
  items(
    generation: Int = 8
    filter: ItemFilter
    pagination: ItemPaginationInput
  ): ItemConnection!
}

#
# TOP-LEVEL CONNECTION
#

type ItemConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemEdge!]!
}

type ItemEdge implements Edge {
  node: Item!
}

#
# NODES AND HELPER TYPES
#

type Item implements Node {
  id: ID!

  """
  E.g. 'electric_terrain' activates 'electric_seed'.
  """
  activatedByFieldState(filter: FieldStateFilter, pagination: FieldStatePaginationInput): ItemActivatedByFieldStateConnection

  """
  E.g. 'sound' activates 'throat_spray'.
  """
  activatedByUsageMethod(filter: UsageMethodFilter, pagination: UsageMethodPaginationInput): ItemActivatedByUsageMethodConnection

  """
  E.g. 'rock_gem' boosts 'rock'-Type Moves by 1.5/1.3 for one turn.
  """
  boostsType(filter: TypeFilter, pagination: TypePaginationInput): ItemBoostsTypeConnection

  """
  As of Gen 8, no Items boost UsageMethods, but should such Items later be released, they will be available here.
  """
  boostsUsageMethod(filter: UsageMethodFilter, pagination: UsageMethodPaginationInput): ItemBoostsUsageMethodConnection

  """
  E.g. 'flame_orb' causes 'burn'.
  """
  causesStatus(filter: StatusFilter, pagination: StatusPaginationInput): ItemCausesStatusConnection

  """
  E.g. 'berry', 'choice' (for Choice Items).
  """
  class: ItemClass

  """
  E.g. 'aguav_berry' confuses Pokemon with a 'naughty' Nature.
  """
  confusesNature(filter: NatureFilter, pagination: NaturePaginationInput): ItemConfusesNatureConnection

  """
  The Descriptions for the Move across the different VersionGroups.
  """
  descriptions(filter: DescriptionFilter, pagination: DescriptionPaginationInput): ItemDescriptionConnection

  effects(filter: EffectFilter, pagination: EffectPaginationInput): ItemEffectConnection

  """
  E.g. Z-Crystals enable their corresponding Z-Moves.
  """
  enablesMove(filter: MoveFilter, pagination: MovePaginationInput): ItemEnablesMoveConnection

  """
  E.g. Mega Stones enable their corresponding mega-evolved Pokemon.
  """
  enablesPokemon(filter: PokemonFilter, pagination: PokemonPaginationInput): ItemEnablesPokemonConnection

  extendsFieldState(filter: FieldStateFilter, pagination: FieldStatePaginationInput): ItemExtendsFieldStateConnection

  """
  The formatted name of the Item, with correct punctuation.
  """
  formattedName: String!

  """
  The name of the Item so that it is compatible with '@smogon/calc'.
  """
  formattedPSID: String!

  """
  The Generation of this Item.
  """ 
  generation(filter: GenerationFilter, pagination: GenerationPaginationInput): ItemGenerationConnection

  """
  E.g. 'air_balloon' ignores 'toxic_spikes' in that they can't poison the holder.
  """
  ignoresFieldState(filter: FieldStateFilter, pagination: FieldStatePaginationInput): ItemIgnoresFieldStateConnection

  """
  The Generation in which the Item was introduced.
  """
  introduced(filter: GenerationFilter, pagination: GenerationPaginationInput): ItemIntroductionConnection

  """
  E.g. 'choice_band' boosts 'attack' by 1.5.
  """
  modifiesStat(filter: StatFilter, pagination: StatPaginationInput): ItemModifiesStatConnection

  """
  The name of the Item in snake_case. Hyphens are converted to underscores.
  """
  name: String!

  """
  Describes the Type and power of the Move Natural Gift when the user holds the Item.
  """
  naturalGift(filter: TypeFilter, pagination: TypePaginationInput): ItemNaturalGiftConnection

  
  """
  ID of the Item in Pokemon Showdown's code for use with, e.g. the package 'pkmn/sets' for Pokemon movesets.
  """
  psID: String!

  """
  The Pokemon necessary for this item to take effect.

  For example:
    Only Venusaur can use Venasaurite to Mega-evolve.
    Only Latias and Latios can obtain the effects of Soul Dew.
  """
  requiresPokemon(filter: PokemonFilter, pagination: PokemonPaginationInput): ItemRequiresPokemonConnection

  """
  E.g. 'air_balloon' resists 'spikes'. One could say that it ignores 'spikes' as well ('ignoresFieldState' field), but this field also grants information about the amount by which it resists 'spikes' (0.0 multiplier).
  """
  resistsFieldState(filter: FieldStateFilter, pagination: FieldStatePaginationInput): ItemResistsFieldStateConnection

  """
  E.g. 'psn_cure_berry' cures 'poison'.
  """
  resistsStatus(filter: StatusFilter, pagination: StatusPaginationInput): ItemResistsStatusConnection

  """
  E.g. 'air_balloon' resists 'ground'-Type Moves.
  """
  resistsType(filter: TypeFilter, pagination: TypePaginationInput): ItemResistsTypeConnection

  """
  E.g. 'safety_goggles' resists 'powder'.
  """
  resistsUsageMethod(filter: UsageMethodFilter, pagination: UsageMethodPaginationInput): ItemResistsUsageMethodConnection
}

#
# CONNECTIONS AND EDGES
#

# DESCRIPTION 

type ItemDescriptionConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemDescriptionEdge!]!

}

type ItemDescriptionEdge implements Edge {  
  node: Description!

  versionGroupCode: String!
}

# EFFECT

type ItemEffectConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemEffectEdge!]! 

}

type ItemEffectEdge implements Edge {  
  node: Effect!
}

# FIELD STATE

type ItemActivatedByFieldStateConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemActivatedByFieldStateEdge!]! 

}

type ItemActivatedByFieldStateEdge implements Edge {  
  node: FieldState!
}

type ItemExtendsFieldStateConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemExtendsFieldStateEdge!]! 

}

type ItemExtendsFieldStateEdge implements Edge {  
  node: FieldState!

  """
  E.g. 'damp_rock' makes 'rain' last for 8 turns rather than 5.
  """
  turns: Int!
}

type ItemIgnoresFieldStateConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemIgnoresFieldStateEdge!]! 

}

type ItemIgnoresFieldStateEdge implements Edge {  
  node: FieldState!
}

type ItemResistsFieldStateConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemResistsFieldStateEdge!]! 

}

type ItemResistsFieldStateEdge implements Edge {  
  node: FieldState!

  multiplier: Float!
}

# GENERATION

type ItemGenerationConnection implements Connection {
  id: ID!
  edges: [ItemGenerationEdge!]! 

}

type ItemGenerationEdge implements Edge {  
  node: Generation!
}

type ItemIntroductionConnection implements Connection {
  id: ID!
  edges: [ItemIntroductionEdge!]! 

}

type ItemIntroductionEdge implements Edge {  
  node: Generation!
}

# MOVE

type ItemEnablesMoveConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemEnablesMoveEdge!]! 

}

type ItemEnablesMoveEdge implements Edge {  
  node: Move!
}

# NATURE

type ItemConfusesNatureConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemConfusesNatureEdge!]! 

}

type ItemConfusesNatureEdge implements Edge {  
  node: Nature!
}

# POKEMON

type ItemEnablesPokemonConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemEnablesPokemonEdge!]!

}

type ItemEnablesPokemonEdge implements Edge {  
  node: Pokemon!
}

type ItemRequiresPokemonConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemRequiresPokemonEdge!]!

}

type ItemRequiresPokemonEdge implements Edge {  
  node: Pokemon!
}

# STAT

type ItemModifiesStatConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemModifiesStatEdge!]!

}

type ItemModifiesStatEdge implements StatModificationEdge & Edge {  
  node: Stat!

  """
  An integer between -6 and 6. Null if the Item modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the Item modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met.
  
  For example, once a Pokemon has fallen bellow quarter health, stat-boosting berries are guaranteed to give a stat boost, so the 'chance' is 100.0.
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: StatModificationRecipient!
}

# STATUS

type ItemCausesStatusConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemCausesStatusEdge!]!

}

type ItemCausesStatusEdge implements StatusCauseEdge & Edge {  
  node: Status!

  """
  The probability of the Item causing the Status once the necessary conditions have been met.
  """
  chance: Float!
}

type ItemResistsStatusConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemResistsStatusEdge!]!

}

type ItemResistsStatusEdge implements Edge {  
  node: Status!
}

# TYPE

type ItemBoostsTypeConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemBoostsTypeEdge!]!

}

type ItemBoostsTypeEdge implements MultiplierEdge & Edge {  
  node: Type!

  """
  The multiplier by which the Item boosts the power of Moves which have the Type. 
  """
  multiplier: Float!
}

type ItemResistsTypeConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemResistsTypeEdge!]!

}

type ItemResistsTypeEdge implements Edge {  
  node: Type!

  """
  The multiplier by which the Item resists the power of Moves which have the Type. 
  """
  multiplier: Float!
}

type ItemNaturalGiftConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemNaturalGiftEdge!]!

}

type ItemNaturalGiftEdge implements Edge {  
  node: Type!

  """
  The power of Natural Gift when used by a Pokemon holding Item.
  """
  power: Int!
}

# USAGE METHOD

type ItemActivatedByUsageMethodConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemActivatedByUsageMethodEdge!]! 
}

type ItemActivatedByUsageMethodEdge implements Edge {  
  node: UsageMethod!
}

type ItemBoostsUsageMethodConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemBoostsUsageMethodEdge!]!

}

type ItemBoostsUsageMethodEdge implements MultiplierEdge & Edge {  
  node: UsageMethod!

  """
  The multiplier by which the Item boosts the power of Moves which have the UsageMethod. 
  """
  multiplier: Float!
}

type ItemResistsUsageMethodConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [ItemResistsUsageMethodEdge!]!

}

type ItemResistsUsageMethodEdge implements Edge {  
  node: UsageMethod!

  """
  The multiplier by which the Item resists the power of Moves which have the UsageMethod. 
  """
  multiplier: Float!
}

#
# ENUMS
#

enum ItemClass {
  BERRY
  CHOICE
  DRIVE
  GEM
  INCENSE
  MEGA_STONE
  MEMORY
  OTHER
  PLATE
  POWER
  STAT_ENHANCER
  TYPE_ENHANCER
  Z_CRYSTAL
}

enum ItemColumnName {
  GEN
  ID
  NAME
  FORMATTED_NAME
  INTRODUCED
  POKEMON_SHOWDOWN_ID
  CLASS
}

#
# INPUTS
#

input ItemPaginationInput {
  limit: Int = 20
  offset: Int = 0
  orderBy: ItemColumnName = POKEMON_SHOWDOWN_ID
  sortBy: SortByEnum = ASC
  search: String = ""
}

input ItemFilter {
  """
  The number of the Generation in which the Item was introduced.
  """
  introduced: Int

  """
  The number of the Generation after which the Item was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the Item was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the Item in snake_case.
  """
  name: String
  
  names: [String]

  """
  Items whose PSID contains the given string, case-insensitive.
  """
  contains: String

  """
  Items whose PSID ends with the given string, case-insensitive.
  """
  endsWith: String

  """
  Items whose PSID starts with the given string, case-insensitive.
  """
  startsWith: String

  # OTHER FILTERS

  class: [ItemClass!]
}