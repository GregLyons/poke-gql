#
# QUERIES
#

extend type Query {
  itemByID(id: ID!): Item!

  """
  Select a Item by its snake_case name, e.g. 'venusaurite', 'firium_z'.
  """
  itemByName(name: String!): Item!
  
  """
  Select Items, with optional cursor-based pagination.

  'generation' refers to the (number of the) Generation in which to consider the Item. Defaults to the latest Generation.

  'introducedAfter' and 'introducedBefore' refer to the number of a Generation, and are inclusive.

  'startsWith', 'contains', 'endsWith' refer to the name, and are case-insensitive.

  'itemClass' is a case-insensitive.tring, with words separated by underscores, e.g. 'mega_stone', 'z_crystal'. See the ItemClass enum for all possibilities.

  """
  items(
    pagination: PaginationInput
    filter: ItemFilter
  ): [Item!]!
}

#
# NODES AND HELPER TYPES
#

type Item implements Node {
  id: ID!

  boostsType: ItemBoostsTypeConnection

  boostsUsageMethod: ItemBoostsUsageMethodConnection

  causesStatus: ItemCausesStatusConnection

  class: ItemClass

  """
  The Descriptions for the Move across the different VersionGroups.
  """
  descriptions: ItemDescriptionConnection

  effects: ItemEffectConnection

  """
  Entities which the Item enables.
  """
  enables: ItemEnablesConnection

  """
  E.g. Z-Crystals enable their corresponding Z-Moves.
  """
  enablesMove: ItemEnablesMoveConnection

  """
  E.g. Mega Stones enable their corresponding mega-evolved Pokemon.
  """
  enablesPokemon: ItemEnablesPokemonConnection

  """
  The formatted name of the Item, with correct punctuation.
  """
  formattedName: String!

  """
  The Generation of this Item.
  """ 
  generation: ItemGenerationConnection

  """
  The Generation in which the Item was introduced.
  """
  introduced: ItemIntroductionConnection

  modifiesStat: ItemModifiesStatConnection

  """
  The name of the Item in snake_case. Hyphens are converted to underscores.
  """
  name: String!

  """
  Describes the Type and power of the Move Natural Gift when the user holds the Item.
  """
  naturalGift: ItemNaturalGiftConnection

  """
  Entities which the Item requires.
  """
  requires: ItemRequiresPokemonConnection

  """
  The Pokemon necessary for this item to take effect.

  For example:
    Only Venusaur can use Venasaurite to Mega-evolve.
    Only Latias and Latios can obtain the effects of Soul Dew.
  """
  requiresPokemon: ItemRequiresPokemonConnection

  resistsType: ItemResistsTypeConnection

  resistsUsageMethod: ItemResistsUsageMethodConnection

  resistsStatus: ItemResistsStatusConnection
}

#
# CONNECTIONS AND EDGES
#

# DESCRIPTION 

type ItemDescriptionConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: DescriptionFilter
  ): [ItemDescriptionEdge!]!

}

type ItemDescriptionEdge implements Edge {  
  node: Description!
}

# EFFECT

type ItemEffectConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: EffectFilter
  ): [ItemEffectEdge!]! 

}

type ItemEffectEdge implements Edge {  
  node: Effect!
}

# GENERATION

type ItemGenerationConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: GenerationFilter
  ): [ItemGenerationEdge!]! 

}

type ItemGenerationEdge implements Edge {  
  node: Generation!
}

type ItemIntroductionConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: GenerationFilter
  ): [ItemIntroductionEdge!]! 

}

type ItemIntroductionEdge implements Edge {  
  node: Generation!
}

# MOVE

type ItemEnablesMoveConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: MoveFilter
  ): [ItemEnablesMoveEdge!]!

}

type ItemEnablesMoveEdge implements Edge {  
  node: Move!
}

# POKEMON

type ItemEnablesPokemonConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: PokemonFilter
  ): [ItemEnablesPokemonEdge!]!

}

type ItemEnablesPokemonEdge implements Edge {  
  node: Pokemon!
}

type ItemRequiresPokemonConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: PokemonFilter
  ): [ItemRequiresPokemonEdge!]!

}

type ItemRequiresPokemonEdge implements Edge {  
  node: Pokemon!
}

# STAT

type ItemModifiesStatConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: StatFilter
  ): [ItemModifiesStatEdge!]!

}

type ItemModifiesStatEdge implements Edge {  
  node: Stat!

  """
  An integer between -6 and 6. Null if the Item modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the Item modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met.
  
  For example, once a Pokemon has fallen bellow quarter health, stat-boosting berries are guaranteed to give a stat boost, so the 'chance' is 100.0.
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: Recipient!
}

# STATUS

type ItemCausesStatusConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: StatusFilter
  ): [ItemCausesStatusEdge!]!

}

type ItemCausesStatusEdge implements Edge {  
  node: Status!

  """
  The probability of the Item causing the Status once the necessary conditions have been met.
  """
  chance: Float!
}

type ItemResistsStatusConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: StatusFilter
  ): [ItemResistsStatusEdge!]!

}

type ItemResistsStatusEdge implements Edge {  
  node: Status!
}

# TYPE

type ItemBoostsTypeConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: TypeFilter
  ): [ItemBoostsTypeEdge!]!

}

type ItemBoostsTypeEdge implements Edge {  
  node: Type!

  """
  The multiplier by which the Item boosts the power of Moves which have the Type. 
  """
  multiplier: Float!
}

type ItemResistsTypeConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: TypeFilter
  ): [ItemResistsTypeEdge!]!

}

type ItemResistsTypeEdge implements Edge {  
  node: Type!

  """
  The multiplier by which the Item resists the power of Moves which have the Type. 
  """
  multiplier: Float!
}

type ItemNaturalGiftConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: TypeFilter
  ): [ItemNaturalGiftEdge!]!

}

type ItemNaturalGiftEdge implements Edge {  
  node: Type!

  """
  The power of Natural Gift when used by a Pokemon holding Item.
  """
  power: Int!
}

# USAGE METHOD

type ItemBoostsUsageMethodConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: UsageMethodFilter
  ): [ItemBoostsUsageMethodEdge!]!

}

type ItemBoostsUsageMethodEdge implements Edge {  
  node: UsageMethod!

  """
  The multiplier by which the Item boosts the power of Moves which have the UsageMethod. 
  """
  multiplier: Float!
}

type ItemResistsUsageMethodConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: UsageMethodFilter
  ): [ItemResistsUsageMethodEdge!]!

}

type ItemResistsUsageMethodEdge implements Edge {  
  node: UsageMethod!

  """
  The multiplier by which the Item resists the power of Moves which have the UsageMethod. 
  """
  multiplier: Float!
}

#
# ENUMS
#

enum ItemClass {
  MEGA_STONE
  Z_CRYSTAL
  TYPE_ENHANCER
  STAT_ENHANCER
  OTHER
}

#
# UNIONS
#

union ItemEnablesConnection = ItemEnablesMoveConnection | ItemEnablesPokemonConnection

#
# INPUTS
#

input ItemFilter {
  """
  The number of the Generation in which the Item was introduced.
  """
  introduced: Int
  """
  The number of the Generation after which the Item was introduced.
  """
  introducedAfter: Int
  """
  The number of the Generation before which the Item was introduced.
  """
  introducedBefore: Int

  """
  The name of the Item in snake_case.
  """
  name: String
  """
  Entities whose name contains the given string, case-insensitive.
  """
  contains: String
  """
  Entities whose name ends with the given string, case-insensitive.
  """
  endsWith: String
  """
  Entities whose name starts with the given string, case-insensitive.
  """
  startsWith: String
}