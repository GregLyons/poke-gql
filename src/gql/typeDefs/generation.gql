#
# QUERIES
#

extend type Query {
  """
  Select a Generation by its arabic numeral, e.g. '1'.
  """
  generationByNumber(number: Int!): Generation!

  """
  Select a Generation by its roman numerical code, e.g. 'ii' or 'III' (case doesn't matter).
  """
  generationByCode(code: String!): Generation!

  """
  Select Generations with filtering and pagination.
  """
  generations(
    pagination: PaginationInput
    filter: GenerationFilter
  ): [Generation!]!
}

#
# NODES AND HELPER TYPES
#

"""
A grouping of the 'Pokemon' games (further divided into VersionGroups), separated based on the Pokemon that the Generation includes. 
"""
type Generation implements Node {
  id: ID!

  """
  All Abilities present in this Generation.
  """
  abilities(filter: AbilityFilter): GenerationAbilityConnection

  """
  All Abilities introduced in this Generation.
  """
  abilitiesIntroduced(filter: AbilityFilter): GenerationIntroducedAbilityConnection

  """
  All Effects present in this Generation.
  """
  effects(filter: EffectFilter): GenerationEffectConnection

  """
  All Effects introduced in this Generation.
  """
  effectsIntroduced(filter: EffectFilter): GenerationIntroducedEffectConnection

  """
  All FieldStates present in this Generation.
  """
  fieldStates(filter: FieldStateFilter): GenerationFieldStateConnection

  """
  All FieldStates introduced in this Generation.
  """
  fieldStatesIntroduced(filter: FieldStateFilter): GenerationIntroducedFieldStateConnection

  """
  The roman numeral for the Generation.
  """
  code: GenerationCode!

  """
  The literal number of the Generation (e.g. '1' for Generation 1, '2' for Generation 2, etc.).
  """
  number: Int!

  """
  All Items present in this Generation.
  """
  items(filter: ItemFilter): GenerationItemConnection

  """
  All Items present in this Generation.
  """
  itemsIntroduced(filter: ItemFilter): GenerationIntroducedItemConnection

  """
  All Moves present in this Generation.
  """
  moves(filter: MoveFilter): GenerationMoveConnection

  """
  All Moves introduced in this Generation.
  """
  movesIntroduced(filter: MoveFilter): GenerationIntroducedMoveConnection

  """
  All Pokemon present in this Generation.
  """
  pokemon(filter: PokemonFilter): GenerationPokemonConnection

  """
  All Pokemon introduced in this Generation.
  """
  pokemonIntroduced(filter: PokemonFilter): GenerationIntroducedPokemonConnection

  """
  All Stats present in this Generation.
  """
  stats(filter: StatFilter): GenerationStatConnection

  """
  All Stats introduced in this Generation.
  """
  statsIntroduced(filter: StatFilter): GenerationIntroducedStatConnection

  """
  All Statuses present in this Generation.
  """
  statuses(filter: StatusFilter): GenerationStatusConnection

  """
  All Statuses introduced in this Generation.
  """
  statusesIntroduced(filter: StatusFilter): GenerationIntroducedStatusConnection

  """
  All Types present in this Generation.
  """
  types(filter: TypeFilter): GenerationTypeConnection

  """
  All Types introduced in this Generation.
  """
  typesIntroduced(filter: TypeFilter): GenerationIntroducedTypeConnection

  """
  All UsageMethods present in this Generation.
  """
  usageMethods(filter: UsageMethodFilter): GenerationUsageMethodConnection

  """
  All UsageMethods introduced in this Generation.
  """
  usageMethodsIntroduced(filter: UsageMethodFilter): GenerationIntroducedUsageMethodConnection

  """
  All VersionGroups present in this Generation.
  """
  versionGroups(filter: VersionGroupFilter): GenerationVersionGroupConnection

  """
  All VersionGroups introduced in this Generation.
  """
  versionGroupsIntroduced(filter: VersionGroupFilter): GenerationIntroducedVersionGroupConnection
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type GenerationAbilityConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: AbilityPaginationInput
  ): [GenerationAbilityEdge!]! 

}

type GenerationIntroducedAbilityConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: AbilityPaginationInput
  ): [GenerationAbilityEdge!]! 

}

type GenerationAbilityEdge implements Edge {  
  node: Ability!
}

# EFFECT

type GenerationEffectConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: EffectPaginationInput
  ): [GenerationEffectEdge!]! 

}

type GenerationIntroducedEffectConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: EffectPaginationInput
  ): [GenerationEffectEdge!]! 

}

type GenerationEffectEdge implements Edge {  
  node: Effect!
}

# FIELD STATE

type GenerationFieldStateConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: FieldStatePaginationInput
  ): [GenerationFieldStateEdge!]! 

}

type GenerationIntroducedFieldStateConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: FieldStatePaginationInput
  ): [GenerationFieldStateEdge!]! 

}

type GenerationFieldStateEdge implements Edge {  
  node: FieldState!
}


# ITEM

type GenerationItemConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: ItemPaginationInput
  ): [GenerationItemEdge!]! 

}

type GenerationIntroducedItemConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: ItemPaginationInput
  ): [GenerationItemEdge!]! 

}

type GenerationItemEdge implements Edge {  
  node: Item!
}

# MOVE

type GenerationMoveConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: MovePaginationInput
  ): [GenerationMoveEdge!]! 

}

type GenerationIntroducedMoveConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: MovePaginationInput
  ): [GenerationMoveEdge!]! 

}

type GenerationMoveEdge implements Edge {  
  node: Move!
}

# POKEMON

type GenerationPokemonConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PokemonPaginationInput
  ): [GenerationPokemonEdge!]! 

}

type GenerationIntroducedPokemonConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PokemonPaginationInput
  ): [GenerationPokemonEdge!]! 

}

type GenerationPokemonEdge implements Edge {  
  node: Pokemon!
}

# STAT

type GenerationStatConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: StatPaginationInput
  ): [GenerationStatEdge!]! 

}

type GenerationIntroducedStatConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: StatPaginationInput
  ): [GenerationStatEdge!]! 

}

type GenerationStatEdge implements Edge {  
  node: Stat!
}

# STATUS

type GenerationStatusConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: StatusPaginationInput
  ): [GenerationStatusEdge!]! 

}

type GenerationIntroducedStatusConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: StatusPaginationInput
  ): [GenerationStatusEdge!]! 

}

type GenerationStatusEdge implements Edge {  
  node: Status!
}

# TYPE

type GenerationTypeConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: TypePaginationInput
  ): [GenerationTypeEdge!]! 

}

type GenerationIntroducedTypeConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: TypePaginationInput
  ): [GenerationTypeEdge!]! 

}

type GenerationTypeEdge implements Edge {  
  node: Type!
}

# USAGE METHOD

type GenerationUsageMethodConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: UsageMethodPaginationInput
  ): [GenerationUsageMethodEdge!]! 

}

type GenerationIntroducedUsageMethodConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: UsageMethodPaginationInput
  ): [GenerationUsageMethodEdge!]! 

}

type GenerationUsageMethodEdge implements Edge {  
  node: UsageMethod!
}

# VERSION GROUP

type GenerationVersionGroupConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [GenerationVersionGroupEdge!]! 

}

type GenerationIntroducedVersionGroupConnection implements Connection {
  id: String!
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [GenerationVersionGroupEdge!]! 

}

type GenerationVersionGroupEdge implements Edge {  
  node: VersionGroup!
}

#
# ENUMS
#

"""
A roman numeral for the Generation.
""" 
enum GenerationCode {
  I
  II
  III
  IV
  V
  VI
  VII
  VIII
  IX
  X
}

#
# INPUTS
#

input GenerationFilter {
  """
  The number of the Generation in which the Generation was introduced.
  """
  introduced: Int

  """
  The number of the Generation after which the Generation was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the Generation was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the Generation in snake_case.
  """
  name: String
  
  names: [String]

  """
  Entities whose name contains the given string, case-insensitive.
  """
  contains: String

  """
  Entities whose name ends with the given string, case-insensitive.
  """
  endsWith: String

  """
  Entities whose name starts with the given string, case-insensitive.
  """
  startsWith: String


  # OTHER FILTERS


  
}