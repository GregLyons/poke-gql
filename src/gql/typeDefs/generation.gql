#
# QUERIES
#

extend type Query {
  generationByID(id: ID!): Generation!

  """
  Select a Generation by its arabic numeral, e.g. '1'.
  """
  generationByNumber(number: Int!): Generation!

  """
  Select a Generation by its roman numerical code, e.g. 'ii' or 'III' (case doesn't matter).
  """
  generationByCode(code: String!): Generation!

  """
  Select Generations, with optional cursor-based pagination.
  """
  generations(cursor: String, limit: Int): [Generation!]!
}

#
# NODES AND HELPER TYPES
#

"""
A grouping of the 'Pokemon' games (further divided into VersionGroups), separated based on the Pokemon that the Generation includes. 
"""
type Generation implements Node {
  id: ID!

  """
  All Abilities present in this Generation.
  """
  abilities: GenerationAbilityConnection

  """
  All Abilities introduced in this Generation.
  """
  abilitiesIntroduced: GenerationIntroducedAbilityConnection

  """
  All Effects present in this Generation.
  """
  effects: GenerationEffectConnection

  """
  All Effects introduced in this Generation.
  """
  effectsIntroduced: GenerationIntroducedEffectConnection

  """
  The roman numeral for the Generation.
  """
  code: GenerationCode!

  """
  The literal number of the Generation (e.g. '1' for Generation 1, '2' for Generation 2, etc.).
  """
  number: Int!

  """
  All Items present in this Generation.
  """
  items: GenerationItemConnection

  """
  All Items present in this Generation.
  """
  itemsIntroduced: GenerationIntroducedItemConnection

  """
  All Moves present in this Generation.
  """
  moves: GenerationMoveConnection

  """
  All Moves introduced in this Generation.
  """
  movesIntroduced: GenerationIntroducedMoveConnection

  """
  All Pokemon present in this Generation.
  """
  pokemon: GenerationPokemonConnection

  """
  All Pokemon introduced in this Generation.
  """
  pokemonIntroduced: GenerationIntroducedPokemonConnection

  """
  All Types present in this Generation.
  """
  types: GenerationTypeConnection

  """
  All Types introduced in this Generation.
  """
  typesIntroduced: GenerationIntroducedTypeConnection

  """
  All UsageMethods present in this Generation.
  """
  usageMethods: GenerationUsageMethodConnection

  """
  All UsageMethods introduced in this Generation.
  """
  usageMethodsIntroduced: GenerationIntroducedUsageMethodConnection

  """
  All VersionGroups present in this Generation.
  """
  versionGroups: GenerationVersionGroupConnection

  """
  All VersionGroups introduced in this Generation.
  """
  versionGroupsIntroduced: GenerationIntroducedVersionGroupConnection
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type GenerationAbilityConnection implements Connection {
  edges(pagination: PaginationInput filter: AbilityFilter): [GenerationAbilityEdge!]! 
  count: Int!
}

type GenerationIntroducedAbilityConnection implements Connection {
  edges(pagination: PaginationInput filter: AbilityFilter): [GenerationAbilityEdge!]! 
  count: Int!
}

type GenerationAbilityEdge implements Edge {  
  node: Ability!
}


# EFFECT

type GenerationEffectConnection implements Connection {
  edges(pagination: PaginationInput filter: EffectFilter): [GenerationEffectEdge!]! 
  count: Int!
}

type GenerationIntroducedEffectConnection implements Connection {
  edges(pagination: PaginationInput filter: EffectFilter): [GenerationEffectEdge!]! 
  count: Int!
}

type GenerationEffectEdge implements Edge {  
  node: Effect!
}


# ITEM

type GenerationItemConnection implements Connection {
  edges(pagination: PaginationInput filter: ItemFilter): [GenerationItemEdge!]! 
  count: Int!
}

type GenerationIntroducedItemConnection implements Connection {
  edges(pagination: PaginationInput filter: ItemFilter): [GenerationItemEdge!]! 
  count: Int!
}

type GenerationItemEdge implements Edge {  
  node: Item!
}

# MOVE

type GenerationMoveConnection implements Connection {
  edges(pagination: PaginationInput filter: MoveFilter): [GenerationMoveEdge!]! 
  count: Int!
}

type GenerationIntroducedMoveConnection implements Connection {
  edges(pagination: PaginationInput filter: MoveFilter): [GenerationMoveEdge!]! 
  count: Int!
}

type GenerationMoveEdge implements Edge {  
  node: Move!
}

# POKEMON

type GenerationPokemonConnection implements Connection {
  edges(pagination: PaginationInput filter: PokemonFilter): [GenerationPokemonEdge!]! 
  count: Int!
}

type GenerationIntroducedPokemonConnection implements Connection {
  edges(pagination: PaginationInput filter: PokemonFilter): [GenerationPokemonEdge!]! 
  count: Int!
}

type GenerationPokemonEdge implements Edge {  
  node: Pokemon!
}

# TYPE

type GenerationTypeConnection implements Connection {
  edges(pagination: PaginationInput filter: TypeFilter): [GenerationTypeEdge!]! 
  count: Int!
}

type GenerationIntroducedTypeConnection implements Connection {
  edges(pagination: PaginationInput filter: TypeFilter): [GenerationTypeEdge!]! 
  count: Int!
}

type GenerationTypeEdge implements Edge {  
  node: Type!
}

# USAGE METHOD

type GenerationUsageMethodConnection implements Connection {
  edges(pagination: PaginationInput filter: UsageMethodFilter): [GenerationUsageMethodEdge!]! 
  count: Int!
}

type GenerationIntroducedUsageMethodConnection implements Connection {
  edges(pagination: PaginationInput filter: UsageMethodFilter): [GenerationUsageMethodEdge!]! 
  count: Int!
}

type GenerationUsageMethodEdge implements Edge {  
  node: UsageMethod!
}

# VERSION GROUP

type GenerationVersionGroupConnection implements Connection {
  edges(pagination: PaginationInput filter: VersionGroupFilter): [GenerationVersionGroupEdge!]! 
  count: Int!
}

type GenerationIntroducedVersionGroupConnection implements Connection {
  edges(pagination: PaginationInput filter: VersionGroupFilter): [GenerationVersionGroupEdge!]! 
  count: Int!
}

type GenerationVersionGroupEdge implements Edge {  
  node: VersionGroup!
}

#
# ENUMS
#

"""
A roman numeral for the Generation.
""" 
enum GenerationCode {
  I
  II
  III
  IV
  V
  VI
  VII
  VIII
  IX
  X
}

#
# INPUTS
#

input GenerationFilter implements Filter {
  introducedAfter: Int
  introducedBefore: Int

  contains: String
  endsWith: String
  startsWith: String
}