#
# QUERIES
#

extend type Query {
  generationByID(id: ID!): Generation!

  """
  Select a Generation by its arabic numeral, e.g. '1'.
  """
  generationByNumber(number: Int!): Generation!

  """
  Select a Generation by its roman numerical code, e.g. 'ii' or 'III' (case doesn't matter).
  """
  generationByCode(code: String!): Generation!

  """
  Select Generations, with optional cursor-based pagination.
  """
  generations(cursor: String, limit: Int): [Generation!]!
}

#
# NODES AND HELPER TYPES
#

"""
A grouping of the 'Pokemon' games (further divided into VersionGroups), separated based on the Pokemon that the Generation includes. 
"""
type Generation implements Node {
  id: ID!

  """
  All Abilities present in this Generation.
  """
  abilities(input: ConnectionInput): GenerationAbilityConnection

  """
  The roman numeral for the Generation.
  """
  genCode: GenerationCode!

  """
  The literal number of the Generation (e.g. '1' for Generation 1, '2' for Generation 2, etc.).
  """
  genNumber: Int!

  """
  All Items present in this Generation.
  """
  items(input: ConnectionInput): GenerationItemConnection

  """
  All Moves present in this Generation.
  """
  moves(input: ConnectionInput): GenerationMoveConnection

  """
  All Pokemon present in this Generation.
  """
  pokemon(input: ConnectionInput): GenerationPokemonConnection

  """
  All Types present in this Generation.
  """
  types(input: ConnectionInput): GenerationTypeConnection
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type GenerationAbilityConnection implements Connection {
  edges: [GenerationAbilityEdge!]! 
  pageInfo: PageInfo!
}

type GenerationAbilityEdge implements Edge {
  cursor: String!
  node: Generation!
}

# EFFECT

type GenerationEffectConnection implements Connection {
  edges: [GenerationEffectEdge!]! 
  pageInfo: PageInfo!
}

type GenerationEffectEdge implements Edge {
  cursor: String!
  node: Generation!
}

# ITEM

type GenerationItemConnection implements Connection {
  edges: [GenerationItemEdge!]! 
  pageInfo: PageInfo!
}

type GenerationItemEdge implements Edge {
  cursor: String!
  node: Generation!
}

# MOVE

type GenerationMoveConnection implements Connection {
  edges: [GenerationMoveEdge!]! 
  pageInfo: PageInfo!
}

type GenerationMoveEdge implements Edge {
  cursor: String!
  node: Generation!
}

# POKEMON

type GenerationPokemonConnection implements Connection {
  edges: [GenerationPokemonEdge!]! 
  pageInfo: PageInfo!
}

type GenerationPokemonEdge implements Edge {
  cursor: String!
  node: Generation!
}

# TYPE

type GenerationTypeConnection implements Connection {
  edges: [GenerationTypeEdge!]! 
  pageInfo: PageInfo!
}

type GenerationTypeEdge implements Edge {
  cursor: String!
  node: Generation!
}

# USAGE METHOD

type GenerationUsageMethodConnection implements Connection {
  edges: [GenerationUsageMethodEdge!]! 
  pageInfo: PageInfo!
}

type GenerationUsageMethodEdge implements Edge {
  cursor: String!
  node: Generation!
}

# VERSION GROUP

type GenerationVersionGroupConnection implements Connection {
  edges: [GenerationVersionGroupEdge!]! 
  pageInfo: PageInfo!
}

type GenerationVersionGroupEdge implements Edge {
  cursor: String!
  node: Generation!
}

#
# ENUMS
#

"""
A roman numeral for the Generation.
""" 
enum GenerationCode {
  I
  II
  III
  IV
  V
  VI
  VII
  VIII
  IX
  X
}