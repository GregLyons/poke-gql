#
# NODES AND HELPER TYPES
#

type Move implements Node {
  id: ID!


  """
  Moves which bypass accuracy checks (e.g. aerial_ace) have null in this field. Otherwise, accuracy is an integer ranging from 0-100.
  """
  accuracy: Int

  causesStatus(input: ConnectionInput): MoveCausesStatusConnection

  """
  Whether or not the Move makes contact (e.g. for interacting with the Move 'static').
  """
  contact: Boolean!

  """
  The name of the Move in Title Case.
  """
  formattedName: String!

  """
  The Generation in which the Move was introduced.
  """ 
  introduced: Generation!

  modifiesStat(input: ConnectionInput): MoveModifiesStatConnection

  """
  The name of the Move in snake_case. 

  Examples:
    flamethrower
    u_turn
    10000000_volt_thunderbolt
    will_o_wisp
  """
  name: String!

  """
  Non-damaging moves (e.g. status moves), fixed damage moves (e.g. sonic_boom), and variable damage (e.g. magnitude) moves have null in this field. 
  """
  power: Int 

  pp: Int!

  """
  E.g. 'breakneck_blitz' requires 'normalium_z'.
  """
  requiresItem(input: ConnectionInput): MoveRequiresItemConnection

  """
  E.g. 'catastropika' requires the Move 'volt_tackle'.
  """
  requiresMove(input: ConnectionInput): MoveRequiresMoveConnection

  """
  E.g. 'g_max_wildfire' requires the user to be 'charizard_gmax'.
  """
  requiresPokemon(input: ConnectionInput): MoveRequiresPokemonConnection

  """
  E.g. 'inferno_overdrive', the Fire Z-Move, requires a 'fire'-Type base move.
  """
  requiresType(input: ConnectionInput): MoveRequiresTypeConnection

  """
  Refers to Moves which either cure or alleviate the negative effects of Status conditions. For example, 'heal_bell' cannot prevent the 'burn' status, but it can heal it. We bring it under 'resistsStatus' rather than splitting it off into its own field like 'healsStatus'. 
  """
  resistsStatus(input: ConnectionInput): MoveResistsStatusConnection

  """
  Who the Move can target.
  """
  target: TargetClass!

  """
  The Type possessed by the Move, e.g. 'flamethrower' is 'fire'-type. 
  """
  type(input: ConnectionInput): MoveTypeConnection

  """
  E.g. The Move 'aura_sphere' has both 'ball' and 'pulse' as UsageMethods.
  """
  usageMethod(input: ConnectionInput): MoveUsageMethodConnection
}

#
# CONNECTIONS AND EDGES
#

# ITEM

type MoveRequiresItemConnection implements Connection {
  edges: [MoveRequiresItemEdge!]!
  pageInfo: PageInfo!
}

type MoveRequiresItemEdge implements Edge {
  cursor: String!
  node: Item!
}

# MOVE

type MoveRequiresMoveConnection implements Connection {
  edges: [MoveRequiresMoveEdge!]!
  pageInfo: PageInfo!
}

type MoveRequiresMoveEdge implements Edge {
  cursor: String!
  node: Move!
}

# POKEMON

type MoveRequiresPokemonConnection implements Connection {
  edges: [MoveRequiresPokemonEdge!]!
  pageInfo: PageInfo!
}

type MoveRequiresPokemonEdge implements Edge {
  cursor: String!
  node: Pokemon!
}

# STAT

type MoveModifiesStatConnection implements Connection {
  edges: [AbilitiyModifiesStatEdge!]!
  pageInfo: PageInfo!
}

type MoveModifiesStatEdge implements Edge {
  cursor: String!
  node: Stat!

  """
  An integer between -6 and 6 (except for moves which max out a stat, e.g. 'belly_drum', in which case is 12). Null if the Move modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the Move modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met (i.e. the move being successful/hitting).
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: Recipient!
}

# STATUS

type MoveCausesStatusConnection implements Connection {
  edges: [MoveCausesStatusEdge!]!
  pageInfo: PageInfo!
}

type MoveCausesStatusEdge implements Edge {
  cursor: String!
  node: Status!

  """
  The probability of the Move causing the Status once the necessary conditions have been met (i.e. the move being successful/hitting).
  """
  chance: Float!
}

type MoveResistsStatusConnection implements Connection {
  edges: [MoveResistsStatusEdge!]!
  pageInfo: PageInfo!
}

type MoveResistsStatusEdge implements Edge {
  cursor: String!
  node: Status!
}

# TYPE

type MoveTypeConnection implements Connection {
  edges: [MoveTypeEdge!]!
  pageInfo: PageInfo!
}

type MoveTypeEdge implements Edge {
  cursor: String!
  node: Type!
}

type MoveRequiresTypeConnection implements Connection {
  edges: [MoveRequiresTypeEdge!]!
  pageInfo: PageInfo!
}

type MoveRequiresTypeEdge implements Edge {
  cursor: String!
  node: Type!
}

# USAGE METHOD

type MoveUsageMethodConnection implements Connection {
  edges: [MoveUsageMethodEdge!]!
  pageInfo: PageInfo!
}

type MoveUsageMethodEdge implements Edge {
  cursor: String!
  node: UsageMethod!
}

#
# ENUMS
#

"""
The damage category of a Move. 'VARIES' means that the Move can be one of the other three categories, e.g. hidden_power before Generation 4.
"""
enum MoveCategory {
  PHYSICAL
  SPECIAL
  STATUS
  VARIES
}

"""
Describes who the Move can target. 'ADJACENT' refers to triple battles, in reference to the user of the Move; in double battles, all Pokemon are considered adjacent.
"""
enum TargetClass {
  ADJACENT_ALLY
  ADJACENT_FOE
  ALL
  ALL_ADJACENT
  ALL_ADJACENT_FOES
  ALL_ALLIES
  ALL_FOES
  ANY
  ANY_ADJACENT
  USER
  USER_AND_ALL_ALLIES
  USER_OR_ADJACENT_ALLY
}