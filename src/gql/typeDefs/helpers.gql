"""
Interface for entities such as Ability, Move, etc.
"""
interface Node {
  id: ID!
}



#
# EDGES
#



"""
Interface for relationships between Nodes. See the description for Connection for more information. 

'node' refers to the ending Node. 

May contain additional fields depending on the relationship.

For example, PokemonMoveEdge represents an edge starting from a Pokemon Node and ending in a Move Node. It has an additional field 'learnMethod', which is a string describing how the Pokemon can learn the given Move. The 'node' field would be of type Move.
"""
interface Edge {
  """
  The ending Node of the Edge.
  """
  node: Node!
}

"""
For relationships in which one entity boosts another, e.g. Abilities boosting UsageMethods.
"""
interface MultiplierEdge implements Edge {
  node: Node!

  multiplier: Float!
}

"""
For relationships in which an entity causes a Status effect.
"""
interface StatusCauseEdge implements Edge {
  node: Node!

  """
  The chance of the Status being inflicted assuming that other necessary conditions have been met (e.g. the Move connects, a Pokemon with 'static' is hit by a contact Move).
  """
  chance: Float!
}

"""
For relationships where an entity modifies Stats, e.g. 'intimidate' lowers 'attack'.
"""
interface StatModificationEdge implements Edge {
  node: Node!
  
  """
  Null if the modification is multiplier-based.
  """
  stage: Int

  """
  Null if the modification is stage-based.
  """
  multiplier: Float

  """
  The chance of the Stat modification occuring assuming that other necessary conditions have been met (e.g. the Move connects, a Pokemon with 'gooey' is hit by a contact Move).
  """
  chance: Float!

  """
  The recipient of the Stat modification once it occurs (e.g. the target of the Move, the user of the Item, etc.)
  """
  recipient: StatModificationRecipient!
}



#
# CONNECTIONS
#



"""
Interface for relationships between Nodes. 'count' returns the total number of edges, while 'edges' refers to the Edges in the Connection.

For example, the 'moves' field in a Pokemon Node has type PokemonMoveConnection. The 'edges' field has type '[PokemonMoveEdge!]!'. The 'node' field of the PokemonMoveEdge type, in turn, has type 'Move!'. 

Continuing the example, PokemonMoveConnection has a counterpart in MovePokemonConnection, which is the type of the 'pokemon' field in a Move Node. The corresponding 'edges' field type is then '[MovePokemonEdge!]!', and the 'node' field of the MovePokemonEdge type has type 'Pokemon!'. 
  
Connections also always have a 'filter' field which implements the 'Filter' interface. The filtering is based on the type of node at the end of the edge. For example, if the edges originate from an Ability Node and end at Pokemon Nodes, then the filter will be a 'PokemonFilter'.

Functionally, the 'filter' field 'implements' the 'Filter' interface (i.e. you can always use the options in the 'Filter' interface, such as 'introducedAfter' and 'startsWith', in your filter input).

Unfortunately, we could not put the 'filter' field in the interface, which would make the documentation clearer.  However, because we want to extend the 'filter' input depending on the type of entity (e.g. filtering Moves by 'power', 'accuracy', etc.), filters like 'MoveFilter' would need to extend the 'Filter' interface. Since filters are 'input' types in GraphQL, this is impossible, since 'input' types cannot 'implement' interfaces (e.g. we cannot write 'MoveFilter implements Filter'), which would be ideal.

Similarly, Connections always have a 'pagination' field which implements the 'Pagination' interface. Each entity has its own 'enum' of column names for ordering. Again, sadly 'input' types cannot 'implement' interfaces.
"""
interface Connection {
  id: ID!

  edges: [Edge!]!
}

enum ColumnName {
  ID
}

interface Pagination {
  limit: Int
  offset: Int
  orderBy: ColumnName
  sortBy: SortByEnum
  search: String
}

"""
Interface for filtering connections and queries. 'Entity' refers to, e.g. Ability, Generation, Item, etc. 
"""
interface Filter {
  """
  The number of the Generation in which the entity was introduced.
  """
  introduced: Int

  """
  The number of the Generation after which the entity was introduced, inclusive.
  """
  introducedAfter: Int
  
  """
  The number of the Generation before which the entity was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the entity in snake_case.
  """
  name: String

  """
  Entities whose name contains the given string, case-insensitive.
  """
  contains: String

  """
  Entities whose name ends with the given string, case-insensitive.
  """
  endsWith: String

  """
  Entities whose name starts with the given string, case-insensitive.
  """
  startsWith: String
}

enum SortByEnum {
  ASC,
  DESC
}

"""
The recipient of the Stat modification, e.g. the 'TARGET' of the Move, the 'USER' of the Item.
"""
enum StatModificationRecipient {
  ALL
  ALL_ALLIES
  ALL_FOES
  TARGET
  USER
}

type Query {
  """
  A placeholder field, as we cannot define an empty type. 
  """
  _empty: String
}