"""
Interface for basic entities such as Ability, Move, etc.
"""
interface Node {
  id: ID!
}

"""
Interface for relationships between Nodes. See the description for Connection for more information. 

'node' refers to the ending Node. 

May contain additional fields depending on the relationship.

For example, PokemonMoveEdge represents an edge starting from a Pokemon Node and ending in a Move Node. It has an additional field 'learnMethod', which is a string describing how the Pokemon can learn the given Move. The 'node' field would be of type Move.
"""
interface Edge {
  node: Node!
}

"""
Interface for relationships between Nodes. 'count' returns the total number of edges, while 'edges' refers to the Edges in the Connection.

For example, the 'moves' field in a Pokemon Node has type PokemonMoveConnection. The 'edges' field has type '[PokemonMoveEdge!]!'. The 'node' field of the PokemonMoveEdge type, in turn, has type 'Move!'. 

Continuing the example, PokemonMoveConnection has a counterpart in MovePokemonConnection, which is the type of the 'pokemon' field in a Move Node. The corresponding 'edges' field type is then '[MovePokemonEdge!]!', and the 'node' field of the MovePokemonEdge type has type 'Pokemon!'. 
"""
interface Connection {
  edges(pagination: PaginationInput filter: GenerationFilter): [Edge!]!
  count: Int!
}

"""
Interface for filtering entities.
"""
interface Filter {
  introducedAfter: Int
  introducedBefore: Int

  contains: String
  endsWith: String
  startsWith: String
}

"""
Input for offset-based pagination.
"""
input PaginationInput {
  limit: Int = 20
  offset: Int = 0
  orderBy: String = "formatted_name"
  sortBy: SortByEnum = ASC
  search: String = ""
}


enum SortByEnum {
  ASC,
  DESC
}

type Query {
  """
  A placeholder field, as we cannot define an empty type. 
  """
  _empty: String
}