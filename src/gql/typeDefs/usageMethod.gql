#
# QUERIES
#

extend type Query {
  usageMethodByID(id: ID!): UsageMethod!

  """
  Select a UsageMethod by its snake_case name, e.g. 'pulse'.
  """
  usageMethodByName(name: String!): UsageMethod!
  
  """
  Select UsageMethods, with optional cursor-based pagination.

  'introducedAfter' and 'introducedBefore' refer to the number of a Generation, and are inclusive.

  'startsWith', 'contains', 'endsWith' refer to the name, and are case-insensitive.
  """
  usageMethods(
    pagination: PaginationInput
    filter: UsageMethodFilter
  ): [UsageMethod!]!
}

#
# NODES AND HELPER FIELDS
#

type UsageMethod implements Node {
  id: ID!

  abilityBoosts: UsageMethodBoostedByAbilityConnection

  abilityResists: UsageMethodResistedByAbilityConnection

  """
  The name of the UsageMethod in Title Case.
  """
  formattedName: String!

  """
  The Generation of this UsageMethod.
  """ 
  generation: UsageMethodGenerationConnection
  
  """
  The Generation in which the UsageMethod became relevant. That is, in which the UsageMethod of the Move would interact with certain Abilities, Moves, etc. 
  
  For example, whether a Move had the UsageMethod 'bite' only became relevant when the ability 'strong_jaw' was introduced in Generation 6, even though Moves like 'crunch' have been around since Generation 2.
  """
  introduced: UsageMethodIntroductionConnection

  itemBoosts: UsageMethodBoostedByItemConnection

  itemResists: UsageMethodResistedByItemConnection

  moves: UsageMethodMoveConnection

  """
  The name of the UsageMethod in snake_case. 
  """
  name: String!

}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type UsageMethodBoostedByAbilityConnection implements Connection {
  edges(pagination: PaginationInput filter: AbilityFilter): [UsageMethodBoostedByAbilityEdge!]!
  count: Int!
}

type UsageMethodBoostedByAbilityEdge implements Edge {  
  node: Ability!
  multiplier: Float!
}

type UsageMethodResistedByAbilityConnection implements Connection {
  edges(pagination: PaginationInput filter: AbilityFilter): [UsageMethodResistedByAbilityEdge!]!
  count: Int!
}

type UsageMethodResistedByAbilityEdge implements Edge {  
  node: Ability!
  multiplier: Float!
}

# GENERATION

type UsageMethodGenerationConnection implements Connection {
  edges(pagination: PaginationInput filter: GenerationFilter): [UsageMethodGenerationEdge!]! 
  count: Int!
}

type UsageMethodGenerationEdge implements Edge {  
  node: Generation!
}

type UsageMethodIntroductionConnection implements Connection {
  edges(pagination: PaginationInput filter: GenerationFilter): [UsageMethodIntroductionEdge!]! 
  count: Int!
}

type UsageMethodIntroductionEdge implements Edge {  
  node: Generation!
}

# ITEM

type UsageMethodBoostedByItemConnection implements Connection {
  edges(pagination: PaginationInput filter: ItemFilter): [UsageMethodBoostedByItemEdge!]!
  count: Int!
}

type UsageMethodBoostedByItemEdge implements Edge {  
  node: Item!
  multiplier: Float!
}

type UsageMethodResistedByItemConnection implements Connection {
  edges(pagination: PaginationInput filter: ItemFilter): [UsageMethodResistedByItemEdge!]!
  count: Int!
}

type UsageMethodResistedByItemEdge implements Edge {  
  node: Item!
  multiplier: Float!
}

# MOVE

type UsageMethodMoveConnection implements Connection {
  edges(pagination: PaginationInput filter: MoveFilter): [UsageMethodMoveEdge!]!
  count: Int!
}

type UsageMethodMoveEdge implements Edge {  
  node: Move!
}

#
# INPUTS
#

input UsageMethodFilter implements Filter {
  introducedAfter: Int
  introducedBefore: Int

  contains: String
  endsWith: String
  startsWith: String
}