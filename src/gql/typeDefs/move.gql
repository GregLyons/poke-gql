#
# QUERIES
#

extend type Query {
  """
  Select a Move by its snake_case name, e.g. 'u_turn'.
  """
  moveByName(
    generation: Int = 8
    generations: [Int]
    name: String!
  ): Move!
  
  """
  Select Moves with filtering and pagination.
  """
  moves(
    generation: Int = 8
    generations: [Int]
    pagination: PaginationInput
    filter: MoveFilter
  ): [Move!]!
}

#
# NODES AND HELPER TYPES
#

type Move implements Node {
  id: ID!

  """
  Moves which bypass accuracy checks (e.g. aerial_ace) have null in this field. Otherwise, accuracy is an integer ranging from 0-100.
  """
  accuracy: Int

  """
  E.g. 'toxic' causes 'bad_poison'.
  """
  causesStatus(filter: StatusFilter): MoveCausesStatusConnection

  """
  Whether or not the Move makes contact (e.g. for interacting with the Move 'static').
  """
  contact: Boolean!

  """
  E.g. The Move 'wonder_room' creates the 'wonder_room' FieldState.
  """
  createsFieldState(filter: FieldStateFilter): MoveCreatesFieldStateConnection

  """
  The Descriptions for the Move across the different VersionGroups.
  """
  descriptions(filter: DescriptionFilter): MoveDescriptionConnection

  """
  E.g. 'stomp' has the Effect 'anti_mini' since it does bonus damage to targets which used the Move 'minimize'.
  """
  effects(filter: EffectFilter): MoveEffectConnection

  """
  E.g. 'volt_tackle' (partly) enables 'catastropika'.
  """
  enablesMove(filter: MoveFilter): MoveEnablesMoveConnection

  """
  E.g. The presence of 'electric_terrain' enhances 'rising_voltage' by increasing its power and making it target all foes.
  """
  enhancedByFieldState(filter: FieldStateFilter): MoveEnhancedByFieldStateConnection

  """
  The name of the Move in Title Case.
  """
  formattedName: String!

  """
  The Generation of this Move.
  """ 
  generation(filter: GenerationFilter): MoveGenerationConnection

  """
  E.g. The presence of 'rain' decreases the power of 'solar_beam' and the healing effects of 'morning_sun'.
  """
  hinderedByFieldState(filter: FieldStateFilter): MoveHinderedByFieldStateConnection

  """
  E.g. 'shell_smash' interacts with 'snatch', 'surf' interacts with 'protect', 'focus_punch' does not interact with 'assist' since it cannot be called by 'assist'.

  We do not say that 'feint' interacts with 'protect', even though strictly speaking it does (it removes the effects of 'protect' from the Pokemon using 'protect'). We intend this field to mean that the Move at the ending Node does is subject to the core mechanic of the Move at the starting Node. (E.g. 'protect' blocks Moves, 'snatch' steals Moves, 'assist' calls Moves).
  """
  interactedWithByMove(filter: moveFilter): MoveInteractedWithByMoveConnection

  """
  E.g. 'shell_smash' interacts with 'snatch', 'surf' interacts with 'protect', 'focus_punch' does not interact with 'assist' since it cannot be called by 'assist'.

  We do not say that 'feint' interacts with 'protect', even though strictly speaking it does (it removes the effects of 'protect' from the Pokemon using 'protect'). We intend this field to mean that the Move at the starting Node does is subject to the core mechanic of the Move at the ending Node. (E.g. 'protect' blocks Moves, 'snatch' steals Moves, 'assist' calls Moves).
  """
  interactsWithMove(filter: MoveFilter): MoveInteractsWithMoveConnection

  """
  The Generation in which the Move was introduced.
  """ 
  introduced(filter: GenerationFilter): MoveIntroductionConnection

  """
  E.g. 'growl' reduces 'attack' by -1.
  """
  modifiesStat(filter: StatFilter): MoveModifiesStatConnection

  """
  The name of the Move in snake_case. 

  Examples:
    flamethrower
    u_turn
    10000000_volt_thunderbolt
    will_o_wisp
  """
  name: String!

  """
  Pokemon who can learn this Move.
  """
  pokemon(filter: PokemonFilter): MovePokemonConnection

  """
  Non-damaging moves (e.g. status moves), fixed damage moves (e.g. sonic_boom), and variable damage (e.g. magnitude) moves have null in this field. 
  """
  power: Int 

  pp: Int!

  priority: Int!

  """
  E.g. The Move 'trick_room' removes the FieldState 'trick_room' if it's already present. 'rain_dance' removes 'harsh_sunlight'.
  """
  removesFieldState(filter: FieldStateFilter): MoveRemovesFieldStateConnection

  """
  E.g. 'breakneck_blitz' requires 'normalium_z'.
  """
  requiresItem(filter: ItemFilter): MoveRequiresItemConnection

  """
  E.g. 'catastropika' requires the Move 'volt_tackle'.
  """
  requiresMove(filter: MoveFilter): MoveRequiresMoveConnection

  """
  E.g. 'g_max_wildfire' requires the user to be 'charizard_gmax'.
  """
  requiresPokemon(filter: PokemonFilter): MoveRequiresPokemonConnection

  """
  E.g. 'inferno_overdrive', the Fire Z-Move, requires a 'fire'-Type base move.
  """
  requiresType(filter: TypeFilter): MoveRequiresTypeConnection

  """
  Refers to Moves which either cure or alleviate the negative effects of Status conditions. For example, 'heal_bell' cannot prevent the 'burn' status, but it can heal it. We bring it under 'resistsStatus' rather than splitting it off into its own field like 'healsStatus'. 
  """
  resistsStatus(filter: StatusFilter): MoveResistsStatusConnection

  """
  Who the Move can target.
  """
  target: TargetClass!

  """
  The Type possessed by the Move, e.g. 'flamethrower' is 'fire'-type. 
  """
  type(filter: TypeFilter): MoveTypeConnection

  """
  E.g. The Move 'aura_sphere' has both 'ball' and 'pulse' as UsageMethods.
  """
  usageMethod(filter: UsageMethodFilter): MoveUsageMethodConnection
}

#
# CONNECTIONS AND EDGES
#

# DESCRIPTION 

type MoveDescriptionConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveDescriptionEdge!]!

}

type MoveDescriptionEdge implements Edge {  
  node: Description!

  versionGroupCode: String!
}

# EFFECT

type MoveEffectConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveEffectEdge!]! 

}

type MoveEffectEdge implements Edge {  
  node: Effect!
}

# FIELD STATE

type MoveCreatesFieldStateConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveCreatesFieldStateEdge!]! 
}

type MoveCreatesFieldStateEdge implements Edge {  
  node: FieldState!

  """
  The number of turns that the FieldState is present when created by the Move.
  """
  turns: Int!
}

type MoveRemovesFieldStateConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveRemovesFieldStateEdge!]! 
}

type MoveRemovesFieldStateEdge implements Edge {  
  node: FieldState!
}


type MoveEnhancedByFieldStateConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveEnhancedByFieldStateEdge!]! 

}

type MoveEnhancedByFieldStateEdge implements Edge {  
  node: FieldState!
}

type MoveHinderedByFieldStateConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveHinderedByFieldStateEdge!]! 

}

type MoveHinderedByFieldStateEdge implements Edge {  
  node: FieldState!
}

# GENERATION

type MoveGenerationConnection implements Connection {
  edges(
    pagination: PaginationInput
  ): [MoveGenerationEdge!]! 

}

type MoveGenerationEdge implements Edge {  
  node: Generation!
}

type MoveIntroductionConnection implements Connection {
  edges(
    pagination: PaginationInput
  ): [MoveIntroductionEdge!]! 

}

type MoveIntroductionEdge implements Edge {  
  node: Generation!
}

# ITEM

type MoveRequiresItemConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveRequiresItemEdge!]!

}

type MoveRequiresItemEdge implements Edge {  
  node: Item!
}

# MOVE

type MoveEnablesMoveConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveEnablesMoveEdge!]!

}

type MoveEnablesMoveEdge implements Edge {  
  node: Move!
}

type MoveInteractedWithByMoveConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveInteractedWithByMoveEdge!]!

}

type MoveInteractedWithByMoveEdge implements Edge {  
  node: Move!
}

type MoveInteractsWithMoveConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveInteractsWithMoveEdge!]!

}

type MoveInteractsWithMoveEdge implements Edge {  
  node: Move!
}

type MoveRequiresMoveConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveRequiresMoveEdge!]!

}

type MoveRequiresMoveEdge implements Edge {  
  node: Move!
}

# POKEMON

type MovePokemonConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MovePokemonEdge!]!

}

type MovePokemonEdge implements Edge {  
  node: Pokemon!

  """
  A string representing how the Pokemon can learn the Move, taken mostly from the system used by Pokemon Showdown.

  M: TM/HM
  T: Tutor
  L: Start or level-up, second character onwards is the level
  R: Restricted (special moves like Rotom moves)
  E: Egg
  D: Dream World
  S: Event, second character onwards is the index in eventData.
  V: Virtual Console or Let's Go transfer
  C: NOT A REAL SOURCE
  """
  learnMethod: String!
}

type MoveRequiresPokemonConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveRequiresPokemonEdge!]!

}

type MoveRequiresPokemonEdge implements Edge {  
  node: Pokemon!
}

# STAT

type MoveModifiesStatConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveModifiesStatEdge!]!

}

type MoveModifiesStatEdge implements Edge {  
  node: Stat!

  """
  An integer between -6 and 6 (except for moves which max out a stat, e.g. 'belly_drum', in which case is 12). Null if the Move modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the Move modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met (i.e. the move being successful/hitting).
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: Recipient!
}

# STATUS

type MoveCausesStatusConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveCausesStatusEdge!]!

}

type MoveCausesStatusEdge implements Edge {  
  node: Status!

  """
  The probability of the Move causing the Status once the necessary conditions have been met (i.e. the move being successful/hitting).
  """
  chance: Float!
}

type MoveResistsStatusConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveResistsStatusEdge!]!

}

type MoveResistsStatusEdge implements Edge {  
  node: Status!
}

# TYPE

type MoveTypeConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveTypeEdge!]!

}

type MoveTypeEdge implements Edge {  
  node: Type!
}

type MoveRequiresTypeConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveRequiresTypeEdge!]!

}

type MoveRequiresTypeEdge implements Edge {  
  node: Type!
}

# USAGE METHOD

type MoveUsageMethodConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [MoveUsageMethodEdge!]!

}

type MoveUsageMethodEdge implements Edge {  
  node: UsageMethod!
}

#
# ENUMS
#

"""
The damage category of a Move. 'VARIES' means that the Move can be one of the other three categories, e.g. hidden_power before Generation 4.
"""
enum MoveCategory {
  PHYSICAL
  SPECIAL
  STATUS
  VARIES
}

"""
Describes who the Move can target. 'ADJACENT' refers to triple battles, in reference to the user of the Move; in double battles, all Pokemon are considered adjacent.
"""
enum TargetClass {
  ADJACENT_ALLY
  ADJACENT_FOE
  ALL
  ALL_ADJACENT
  ALL_ADJACENT_FOES
  ALL_ALLIES
  ALL_FOES
  ANY
  ANY_ADJACENT
  USER
  USER_AND_ALL_ALLIES
  USER_OR_ADJACENT_ALLY
}

#
# UNIONS
#

union MoveRequiresConnection = MoveRequiresItemConnection | MoveRequiresMoveConnection | MoveRequiresPokemonConnection | MoveRequiresTypeConnection

union MoveEnablesConnection = MoveEnablesMoveConnection

#
# INPUTS
#

input MoveFilter {
  """
  The number of the Generation in which the Move was introduced.
  """
  introduced: Int

  """
  The number of the Generation after which the Move was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the Move was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the Move in snake_case.
  """
  name: String

  """
  Moves whose name contains the given string, case-insensitive.
  """
  contains: String

  """
  Moves whose name ends with the given string, case-insensitive.
  """
  endsWith: String
  
  """
  Moves whose name starts with the given string, case-insensitive.
  """
  startsWith: String


  # STATS FILTERS
  

  """
  Moves whose Accuracy is less than the given number, inclusive.
  """
  maxAccuracy: Int

  """
  Moves whose Accuracy is greater than the given number, inclusive.
  """
  minAccuracy: Int

  """
  Moves whose Power is less than the given number, inclusive.
  """
  maxPower: Int

  """
  Moves whose Power is greater than the given number, inclusive.
  """
  minPower: Int

  """
  Moves whose PP is less than the given number, inclusive.
  """
  maxPP: Int

  """
  Moves whose PP is greater than the given number, inclusive.
  """
  minPP: Int

  """
  Moves whose Priority is less than the given number, inclusive.
  """
  maxPriority: Int

  """
  Moves whose Priority is greater than the given number, inclusive.
  """
  minPriority: Int


  
  # OTHER FILTERS
  

  """
  Only select Moves which bypass accuracy checks.
  """
  bypassAccuracy: Boolean

  """
  Moves of the given category, e.g. 'PHYSICAL', 'SPECIAL'.
  """
  category: MoveCategory

  """
  Only select Moves which make contact.
  """
  contact: Boolean

  """
  Moves of the given target class, e.g. 'ALL', 'ANY', 'ADJACENT_FOE', 'USER'.
  """
  target: TargetClass
}