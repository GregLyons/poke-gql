#
# QUERIES
#

extend type Query {
  """
  Select an Ability by its snake_case name, e.g. 'intimidate', 'rks_system'.
  """
  abilityByName(
    generation: Int = 8
    generations: [Int]
    name: String!
  ): [Ability!]! 
  
  """
  Select Abilities with filtering and pagination.
  """
  abilities(
    generation: Int = 8
    generations: [Int]
    pagination: PaginationInput
    filter: AbilityFilter
  ): [Ability!]!
}

#
# NODES AND HELPER TYPES
#

"""
An Ability which a Pokemon can possess.
"""
type Ability implements Node {
  id: ID!

  """
  E.g. 'harsh_sunlight' activates 'chlorophyll'.
  """
  activatedByFieldState(filter: FieldStateFilter): AbilityActivatedByFieldStateConnection

  """
  E.g. 'blaze' boosts 'fire'.
  """ 
  boostsType(filter: TypeFilter): AbilityBoostsTypeConnection

  """
  E.g. 'liquid_voice' boosts 'sound'.
  """
  boostsUsageMethod(filter: UsageMethodFilter): AbilityBoostsUsageMethodConnection

  """
  E.g. 'poison_point' causes 'poison'.
  """
  causesStatus(filter: StatusFilter): AbilityCausesStatusConnection

  """
  E.g. 'electric_surge' creates 'electric_terrain'.
  """
  createsFieldState(filter: FieldStateFilter): AbilityCreatesFieldStateConnection

  """
  The Descriptions for the Ability across the different VersionGroups.
  """
  descriptions(filter: DescriptionFilter): AbilityDescriptionConnection

  """
  E.g. 'forecast' has the Effect 'changes_pokemon_type'. 
  """
  effects(filter: EffectFilter): AbilityEffectConnection

  """
  The name of the Ability in Title Case, with appropriate punctuation and capitalization. 

  For example:
    'RKS System' instead of 'Rks System'
    'Power of Alchemy' instead of 'Power Of Alchemy'
  """
  formattedName: String!

  """
  The Generation of this Ability.
  """ 
  generation(filter: GenerationFilter): AbilityGenerationConnection

  """
  E.g. 'levitate' ignores 'sticky_web', 'infiltrator' ignores 'reflect'.
  """
  ignoresFieldState(filter: FieldStateFilter): AbilityIgnoresFieldStateConnection

  """
  The Generation in which the Ability was introduced.
  """ 
  introduced(filter: GenerationFilter): AbilityIntroductionConnection

  """
  E.g. 'intimidate' modifies 'attack'.
  """
  modifiesStat(filter: StatFilter): AbilityModifiesStatConnection

  """
  The name of the Ability in snake_case.
  """
  name: String!

  """
  Pokemon which can possess this Ability.
  """
  pokemon(filter: PokemonFilter): AbilityPokemonConnection

  """
  E.g. 'cloud_nine' prevents 'aurora_veil' from being set up, even in the presence of 'hail'. This is because 'cloud_nine' suppresses the effects of 'hail'. 'cloud_nine' does not remove or suppress 'aurora_veil' that is already set-up. 
  """
  preventsFieldState(filter: FieldStateFilter): AbilityPreventsFieldStateConnection

  """
  E.g. 'drizzle' removes other weather effects.
  """
  removesFieldState(filter: FieldStateFilter): AbilityRemovesFieldStateConnection

  """
  E.g. 'water_absorb' resists 'water', with a multiplier of 0. Also applies to Abilities which give weaknesses to types (e.g. we say 'dry_skin' resists 'fire', with a multiplier of 1.25).
  """
  resistsType(filter: TypeFilter): AbilityResistsTypeConnection

  """
  E.g. 'soundproof' resists 'sound'.
  """
  resistsUsageMethod(filter: UsageMethodFilter): AbilityResistsUsageMethodConnection

  """
  E.g. 'flower_veil' resists 'sleep'. 
  """
  resistsStatus(filter: StatusFilter): AbilityResistsStatusConnection

  """
  E.g. 'cloud_nine' suppresses weather effects, but does not remove them (if the Pokemon is switched out, the effects return).
  """
  suppressesFieldState(filter: FieldStateFilter): AbilitySuppressesFieldStateConnection
}

#
# CONNECTIONS AND EDGES
#

# DESCRIPTION 

type AbilityDescriptionConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityDescriptionEdge!]!

}

type AbilityDescriptionEdge implements Edge {  
  node: Description!

  versionGroupCode: String!
}

# EFFECT

type AbilityEffectConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityEffectEdge!]! 
}

type AbilityEffectEdge implements Edge {  
  node: Effect!
}

# FIELD STATE

type AbilityActivatedByFieldStateConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityActivatedByFieldStateEdge!]! 
}

type AbilityActivatedByFieldStateEdge implements Edge {  
  node: FieldState!
}

type AbilityCreatesFieldStateConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityCreatesFieldStateEdge!]! 
}

type AbilityCreatesFieldStateEdge implements Edge {  
  node: FieldState!

  """
  The number of turns that the FieldState is present when created by the Ability. '0' implies the FieldState either lasts indefinitely until overwritten, or is present as long as the source is present (e.g. Primal Kyogre's Primordial Sea).
  """
  turns: Int!
}

type AbilityIgnoresFieldStateConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityIgnoresFieldStateEdge!]! 
}

type AbilityIgnoresFieldStateEdge implements Edge {  
  node: FieldState!
}

type AbilityPreventsFieldStateConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityPreventsFieldStateEdge!]! 
}

type AbilityPreventsFieldStateEdge implements Edge {  
  node: FieldState!
}

type AbilityRemovesFieldStateConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityRemovesFieldStateEdge!]! 
}

type AbilityRemovesFieldStateEdge implements Edge {  
  node: FieldState!
}

type AbilitySuppressesFieldStateConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilitySuppressesFieldStateEdge!]! 
}

type AbilitySuppressesFieldStateEdge implements Edge {  
  node: FieldState!
}

# GENERATION

type AbilityGenerationConnection implements Connection {
  edges(
    pagination: PaginationInput
  ): [AbilityGenerationEdge!]! 

}

type AbilityGenerationEdge implements Edge {  
  node: Generation!
}

type AbilityIntroductionConnection implements Connection {
  edges(
    pagination: PaginationInput
  ): [AbilityIntroductionEdge!]! 

}

type AbilityIntroductionEdge implements Edge {  
  node: Generation!
}

# POKEMON

type AbilityPokemonConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityPokemonEdge!]!

}

type AbilityPokemonEdge implements Edge {  
  node: Pokemon!
  slot: AbilitySlot!
}

# STAT

type AbilityModifiesStatConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityModifiesStatEdge!]!

}

type AbilityModifiesStatEdge implements Edge {  
  node: Stat!

  """
  An integer between -6 and 6 (except for moves which max out a stat, e.g. 'anger_point', in which case is 12). Null if the Ability modifies Stat via a multiplier.
  """
  stage: Int

  """
  Null if the Ability modifies Stat via a stage increase or decrease.
  """
  multiplier: Float

  """
  The probability of the Stat modification occurring once the necessary conditions have been met.
  
  For example, once rain is present for 'swift_swim', the speed boost is guaranteed to occur, so the 'chance' is 100.0.
  """
  chance: Float!

  """
  The recipient of the Stat modification.
  """
  recipient: Recipient!
}

# STATUS

type AbilityCausesStatusConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityCausesStatusEdge!]!

}

type AbilityCausesStatusEdge implements Edge {  
  node: Status!

  """
  The probability of the Ability causing the Status once the necessary conditions have been met. 

  For example, 'static' causing 'paralysis' has a 'chance' of 30.0 since that is the probability of the user of a Move being paralyzed, assuming the Move makes contact (a necessary condition for 'static').
  """
  chance: Float!
}

type AbilityResistsStatusConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityResistsStatusEdge!]!

}

type AbilityResistsStatusEdge implements Edge {  
  node: Status!
}

# TYPE

type AbilityBoostsTypeConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityBoostsTypeEdge!]!

}

type AbilityBoostsTypeEdge implements Edge {  
  node: Type!

  """
  The multiplier by which the Ability boosts the power of Moves which have the Type. 
  """
  multiplier: Float!
}

type AbilityResistsTypeConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityResistsTypeEdge!]!

}

type AbilityResistsTypeEdge implements Edge {  
  node: Type!

  """
  The multiplier by which the Ability resists the power of Moves which have the Type. 
  """
  multiplier: Float!
}

# USAGE METHOD

type AbilityBoostsUsageMethodConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityBoostsUsageMethodEdge!]!

}

type AbilityBoostsUsageMethodEdge implements Edge {  
  node: UsageMethod!

  """
  The multiplier by which the Ability boosts the power of Moves which have the UsageMethod. 
  """
  multiplier: Float!
}

type AbilityResistsUsageMethodConnection implements Connection {
  count: Int!
  
  edges(
    pagination: PaginationInput
  ): [AbilityResistsUsageMethodEdge!]!

}

type AbilityResistsUsageMethodEdge implements Edge {  
  node: UsageMethod!

  """
  The multiplier by which the Ability resists the power of Moves which have the UsageMethod. 
  """
  multiplier: Float!
}

#
# ENUMS
#
enum Recipient {
  ALL_FOES
  TARGET
  USER
}

enum AbilitySlot {
  ONE
  TWO
  HIDDEN
}

#
# INPUTS
# 

input AbilityFilter {
  """
  The number of the Generation in which the Ability was introduced.
  """
  introduced: Int

  """
  The number of the Generation after which the Ability was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the Ability was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the Ability in snake_case.
  """
  name: String

  """
  Entities whose name contains the given string, case-insensitive.
  """
  contains: String

  """
  Entities whose name ends with the given string, case-insensitive.
  """
  endsWith: String

  """
  Entities whose name starts with the given string, case-insensitive.
  """
  startsWith: String
}