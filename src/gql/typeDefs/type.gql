#
# QUERIES
#

extend type Query {
  typeByID(id: ID!): Type!

  """
  Select a Type by its snake_case name, e.g. 'dark'.
  """
  typeByName(generation: Int = 8, name: String!): Type!
  
  """
  Select Types, with optional cursor-based pagination.

  'generation' refers to the (number of the) Generation in which to consider the Type. Defaults to the latest Generation.

  'introducedAfter' and 'introducedBefore' refer to the number of a Generation, and are inclusive.

  'startsWith', 'contains', 'endsWith' refer to the name, and are case-insensitive.
  """
  types(
    generation: Int = 8
    pagination: PaginationInput
    filter: TypeFilter
  ): [Type!]!
}

#
# NODES AND HELPER TYPES
#

type Type implements Node {
  id: ID!

  boostedByAbility: TypeBoostedByAbilityConnection

  boostedByFieldState: TypeBoostedByFieldStateConnection

  boostedByItem: TypeBoostedByItemConnection

  """
  The matchups of this Type as the defending-type against other attacking Types.
  """
  defensiveMatchups: DefensiveTypeMatchupConnection

  """
  Entities which the Type enables.
  """
  enables: TypeEnablesMoveConnection

  """
  E.g. 'normal'-Type Moves enable 'breakneck_blitz'.
  """
  enablesMove: TypeEnablesMoveConnection

  """
  The name of the Type in Title Case.
  """
  formattedName: String!

  """
  The Generation of this Type.
  """ 
  generation: TypeGenerationConnection

  """
  E.g. 'flying' Type Pokemon ignores 'spikes'.
  """
  ignoresFieldState: TypeIgnoresFieldStateConnection

  """
  The Generation in which the Type was introduced.
  """
  introduced: TypeIntroductionConnection

  moves: TypeMoveConnection

  """
  The name of the Type in snake_case. 
  """
  name: String!

  """
  The Items which grant their holder a 'natural_gift' of this Type.
  """
  naturalGift: TypeNaturalGiftConnection

  """
  The matchups of this Type as the attacking-type against other defending Types.
  """
  offensiveMatchups: OffensiveTypeMatchupConnection
  
  pokemon: TypePokemonConnection

  """
  E.g. 'poison' Type Pokemon remove 'toxic_spikes' on entry.
  """
  removesFieldState: TypeRemovesFieldStateConnection

  resistedByAbility: TypeResistedByAbilityConnection

  """
  E.g. 'harsh_sunlight' weakens 'water' Type Moves.
  """
  resistedByFieldState: TypeResistedByFieldStateConnection

  resistedByItem: TypeResistedByItemConnection

  """
  E.g. 'ground' Type Pokemon take less damage from the 'stealth_rock' FieldState. 'fairy' Type Pokemon take more damage from 'sharp_steel', but we still group it in this category rather than add an extra field.
  """ 
  resistsFieldState: TypeResistsFieldStateConnection

  """
  FieldStates which turn 'weather_ball' to this Type.
  """
  weatherBall: TypeWeatherBallConnection

  #
  # CONVENIENCE FIELDS
  #
  
  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  doubleDamageFrom: [Type!]!

  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  neutralDamageFrom: [Type!]!

  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  halfDamageFrom: [Type!]!

  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  noDamageFrom: [Type!]!

  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  doubleDamageTo: [Type!]!

  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  neutralDamageTo: [Type!]!

  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  halfDamageTo: [Type!]!

  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  noDamageTo: [Type!]!
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type TypeBoostedByAbilityConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: AbilityFilter
  ): [TypeBoostedByAbilityEdge!]!

}

type TypeBoostedByAbilityEdge implements Edge {  
  node: Ability!
  multiplier: Float!
}

type TypeResistedByAbilityConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: AbilityFilter
  ): [TypeResistedByAbilityEdge!]!

}

type TypeResistedByAbilityEdge implements Edge {  
  node: Ability!
  multiplier: Float!
}

# FIELD STATE

type TypeWeatherBallConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: FieldStateFilter
  ): [TypeWeatherBallEdge!]!

}

type TypeWeatherBallEdge implements Edge {  
  node: FieldState!
}

type TypeBoostedByFieldStateConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: FieldStateFilter
  ): [TypeBoostedByFieldStateEdge!]!

}

type TypeBoostedByFieldStateEdge implements Edge {  
  node: FieldState!
  multiplier: Float!
}

type TypeResistedByFieldStateConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: FieldStateFilter
  ): [TypeResistedByFieldStateEdge!]!

}

type TypeResistedByFieldStateEdge implements Edge {  
  node: FieldState!
  multiplier: Float!
}

type TypeIgnoresFieldStateConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: FieldStateFilter
  ): [TypeIgnoresFieldStateEdge!]! 

}

type TypeIgnoresFieldStateEdge implements Edge {  
  node: FieldState!
}

type TypeResistsFieldStateConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: FieldStateFilter
  ): [TypeResistsFieldStateEdge!]! 

}

type TypeResistsFieldStateEdge implements Edge {  
  node: FieldState!

  multiplier: Float!
}

type TypeRemovesFieldStateConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: FieldStateFilter
  ): [TypeRemovesFieldStateEdge!]! 

}

type TypeRemovesFieldStateEdge implements Edge {  
  node: FieldState!
}

# GENERATION

type TypeGenerationConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: ItemFilter
  ): [TypeGenerationEdge!]! 

}

type TypeGenerationEdge implements Edge {  
  node: Generation!
}

type TypeIntroductionConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: ItemFilter
  ): [TypeIntroductionEdge!]! 

}

type TypeIntroductionEdge implements Edge {  
  node: Generation!
}

# ITEM

type TypeNaturalGiftConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: ItemFilter
  ): [TypeNaturalGiftEdge!]!

}

type TypeNaturalGiftEdge implements Edge {  
  node: Item!

  """
  The power of Natural Gift when used by a Pokemon holding Item.
  """
  power: Int!
}

type TypeBoostedByItemConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: ItemFilter
  ): [TypeBoostedByItemEdge!]!

}

type TypeBoostedByItemEdge implements Edge {  
  node: Item!
  multiplier: Float!
}

type TypeResistedByItemConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: ItemFilter
  ): [TypeResistedByItemEdge!]!

}

type TypeResistedByItemEdge implements Edge {  
  node: Item!
  multiplier: Float!
}

# MOVE

type TypeMoveConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: MoveFilter
  ): [TypeMoveEdge!]!

}

type TypeMoveEdge implements Edge {  
  node: Move!
}

type TypeEnablesMoveConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: MoveFilter
  ): [TypeEnablesMoveEdge!]!

}

type TypeEnablesMoveEdge implements Edge {  
  node: Move!
}

# POKEMON

type TypePokemonConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: PokemonFilter
  ): [TypePokemonEdge!]!

}

type TypePokemonEdge implements Edge {  
  node: Pokemon!
}

# TYPE

type DefensiveTypeMatchupConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: TypeFilter
  ): [DefensiveTypeMatchupEdge!]!

}

type DefensiveTypeMatchupEdge implements Edge {  
  node: Type!

  """
  The multiplier of the Type-matchup, with the starting node as the defendingType and the ending node as the attacking Type.
  """
  multiplier: Float!
}

type OffensiveTypeMatchupConnection implements Connection {
  edges(
    pagination: PaginationInput
    filter: TypeFilter
  ): [OffensiveTypeMatchupEdge!]!

}

type OffensiveTypeMatchupEdge implements Edge {  
  node: Type!

  """
  The multiplier of the Type-matchup, with the starting node as the attacking Type and the ending node as the defending Type.
  """
  multiplier: Float!
}

#
# INPUTS
#

input TypeFilter {
  """
  The number of the Generation in which the Type was introduced.
  """
  introduced: Int

  """
  The number of the Generation after which the Type was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the Type was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the Type in snake_case.
  """
  name: String

  """
  Entities whose name contains the given string, case-insensitive.
  """
  contains: String

  """
  Entities whose name ends with the given string, case-insensitive.
  """
  endsWith: String

  """
  Entities whose name starts with the given string, case-insensitive.
  """
  startsWith: String
}