#
# QUERIES
#

extend type Query {
  typeByID(id: ID!): Type!

  """
  Select a Type by its snake_case name, e.g. 'dark'.
  """
  typeByName(name: String!): Type!
  
  """
  Select Types, with optional cursor-based pagination.

  'generation' refers to the (number of the) Generation in which to consider the Type. Defaults to the latest Generation.

  'introducedAfter' and 'introducedBefore' refer to the number of a Generation, and are inclusive.

  'startsWith', 'contains', 'endsWith' refer to the name, and are case-insensitive.
  """
  types(
    cursor: String,
    limit: Int,
    generation: Int = 8,
    contains: String,
    endsWith: String,
    introducedAfter: Int,
    introducedBefore: Int,
    startsWith: String,
  ): [Type!]!
}

#
# NODES AND HELPER TYPES
#

type Type implements Node {
  id: ID!

  abilityBoosts: TypeBoostedByAbilityConnection

  abilityResists: TypeResistedByAbilityConnection

  """
  Entities which the Type enables.
  """
  enables: TypeEnablesMoveConnection

  """
  E.g. 'normal'-Type Moves enable 'breakneck_blitz'.
  """
  enablesMove: TypeEnablesMoveConnection


  """
  The name of the Type in Title Case.
  """
  formattedName: String!

  """
  The Generation in which the Type was introduced.
  """
  introduced: TypeGenerationConnection

  itemBoosts: TypeBoostedByItemConnection

  itemResists: TypeResistedByItemConnection

  """
  The matchups of this Type as the attacking-type against other defending Types.
  """
  matchups: TypeMatchupConnection

  moves: TypeMoveConnection

  """
  The name of the Type in snake_case. 
  """ 
  name: String!

  """
  The Items which grant their holder a 'natural_gift' of this Type.
  """
  naturalGift: ItemNaturalGiftConnection

  pokemon: TypePokemonConnection

  #
  # CONVENIENCE FIELDS
  #
  
  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  doubleDamageFrom: [Type!]!

  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  neutralDamageFrom: [Type!]!

  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  halfDamageFrom: [Type!]!

  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  noDamageFrom: [Type!]!

  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  doubleDamageTo: [Type!]!

  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  neutralDamageTo: [Type!]!

  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  halfDamageTo: [Type!]!

  """
  Convenience field for damage calculations. For pagination, use the 'matchups' field.
  """
  noDamageTo: [Type!]!
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type TypeBoostedByAbilityConnection implements Connection {
  edges(pagination: PaginationInput): [TypeBoostedByAbilityEdge!]!
  count: Int!
}

type TypeBoostedByAbilityEdge implements Edge {  
  node: Ability!
  multiplier: Float!
}

type TypeResistedByAbilityConnection implements Connection {
  edges(pagination: PaginationInput): [TypeResistedByAbilityEdge!]!
  count: Int!
}

type TypeResistedByAbilityEdge implements Edge {  
  node: Ability!
  multiplier: Float!
}

# GENERATION

type TypeGenerationConnection implements Connection {
  edges(pagination: PaginationInput): [TypeGenerationEdge!]! 
  count: Int!
}

type TypeGenerationEdge implements Edge {  
  node: Generation!
}

# ITEM

type TypeNaturalGiftConnection implements Connection {
  edges(pagination: PaginationInput): [TypeNaturalGiftEdge!]!
  count: Int!
}

type TypeNaturalGiftEdge implements Edge {  
  node: Item!

  """
  The power of Natural Gift when used by a Pokemon holding Item.
  """
  power: Int!
}

type TypeBoostedByItemConnection implements Connection {
  edges(pagination: PaginationInput): [TypeBoostedByItemEdge!]!
  count: Int!
}

type TypeBoostedByItemEdge implements Edge {  
  node: Item!
  multiplier: Float!
}

type TypeResistedByItemConnection implements Connection {
  edges(pagination: PaginationInput): [TypeResistedByItemEdge!]!
  count: Int!
}

type TypeResistedByItemEdge implements Edge {  
  node: Item!
  multiplier: Float!
}

# MOVE

type TypeMoveConnection implements Connection {
  edges(pagination: PaginationInput): [TypeMoveEdge!]!
  count: Int!
}

type TypeMoveEdge implements Edge {  
  node: Move!
}

type TypeEnablesMoveConnection implements Connection {
  edges(pagination: PaginationInput): [TypeEnablesMoveEdge!]!
  count: Int!
}

type TypeEnablesMoveEdge implements Edge {  
  node: Move!
}

# POKEMON

type TypePokemonConnection implements Connection {
  edges(pagination: PaginationInput): [TypePokemonEdge!]!
  count: Int!
}

type TypePokemonEdge implements Edge {  
  node: Pokemon!
}

# TYPE

type TypeMatchupConnection implements Connection {
  edges(pagination: PaginationInput): [TypeMatchupEdge!]!
  count: Int!
}

type TypeMatchupEdge implements Edge {  
  node: Type!

  """
  The multiplier of the Type-matchup, with the starting node as the attacking Type and the ending node as the defending Type.
  """
  multiplier: Float!
}