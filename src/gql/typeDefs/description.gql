#
# QUERIES
#

extend type Query {
  descriptionByID(id: ID!): Description!

  """
  Select all descriptions of a given entity class, e.g. 'ABILITY'.
  """
  descriptionsByEntityClass(class: DescriptionEntityClass!): [Description!]!

  """
  Select all descriptions for an entity of the given name.
  """
  descriptionsByEntityName(name: String!): [Description!]!

  """
  Select all descriptions for entities of the given names.
  """
  descriptionsByEntityNames(names: [String!]!): [Description!]!

  """
  Select Descriptions with filtering and pagination.
  """
  descriptions(
    filter: DescriptionFilter
    pagination: DescriptionPaginationInput
  ): DescriptionConnection!
}

#
# TOP-LEVEL CONNECTION
#

type DescriptionConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [DescriptionEdge!]!
}

type DescriptionEdge implements Edge {
  node: Description!
}

#
# NODES AND HELPER TYPES
#

type Description implements Node {
  id: ID!

  """
  The entity to which the Description applies.
  """
  entity: DescriptionEntityConnection

  """
  The class of entity that the Description is describing, e.g. 'ITEM'.
  """ 
  entityClass: DescriptionEntityClass!

  """
  The name of the entity that the Description is describing, e.g. 'venusaurite'.
  """ 
  entityName: String!

  """
  The text of the Description as it appears on in-game/on Bulbapedia.
  """
  text: String!

  """
  The VersionGroup(s) in which the Description is present.
  """
  versionGroups(filter: VersionGroupFilter, pagination: VersionGroupPaginationInput): DescriptionVersionGroupConnection
}

#
# CONNECTIONS AND EDGES
#

# ABILITY

type DescriptionAbilityConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [DescriptionAbilityEdge!]!

}

type DescriptionAbilityEdge implements Edge {  
  node: Ability!

  versionGroupCode: String!
}

# ITEM

type DescriptionItemConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [DescriptionItemEdge!]!

}

type DescriptionItemEdge implements Edge {  
  node: Item!

  versionGroupCode: String!
}

# MOVE 

type DescriptionMoveConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [DescriptionMoveEdge!]!

}

type DescriptionMoveEdge implements Edge {  
  node: Move!

  versionGroupCode: String!
}

# VERSION GROUP 

type DescriptionVersionGroupConnection implements Connection {
  id: ID!
  count: Int!
  
  edges: [DescriptionVersionGroupEdge!]!

}

type DescriptionVersionGroupEdge implements Edge {  
  node: VersionGroup!
}

#
# ENUMS
#

"""
The type of entity that the Description is describing.
"""
enum DescriptionEntityClass {
  ABILITY
  ITEM
  MOVE
}

#
# UNIONS 
#

union DescriptionEntityConnection = DescriptionAbilityConnection | DescriptionItemConnection | DescriptionMoveConnection

enum DescriptionColumnName {
  ENTITY_CLASS
  ENTITY_NAME
}

#
# INPUTS
# 

input DescriptionPaginationInput {
  limit: Int = 20
  offset: Int = 0
  orderBy: DescriptionColumnName = ENTITY_CLASS
  sortBy: SortByEnum = ASC
  search: String = ""
}

input DescriptionFilter {
  """
  The number of the Generation in which the Description was introduced.
  """
  introduced: Int

  """
  The number of the Generation after which the Description was introduced, inclusive.
  """
  introducedAfter: Int

  """
  The number of the Generation before which the Description was introduced, inclusive.
  """
  introducedBefore: Int

  """
  The name of the Description in snake_case.
  """
  name: String
  
  names: [String]

  """
  Entities whose name contains the given string, case-insensitive.
  """
  contains: String

  """
  Entities whose name ends with the given string, case-insensitive.
  """
  endsWith: String

  """
  Entities whose name starts with the given string, case-insensitive.
  """
  startsWith: String
}